var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.904,1,2.285]],["body/modules/AppModule.html",[0,2.817,1,4.381,2,2.159,3,2.817,4,3.278,5,3.278,6,3.535,7,0.026,8,3.856,9,3.379,10,2.59,11,2.59,12,0.347,13,0.309,14,0.309,15,3.877,16,4.189,17,1.596,18,3.877,19,5.059,20,5.969,21,0.426,22,3.877,23,1.392,24,1.392,25,0.309,26,1.14,27,5.059,28,1.392,29,2.884,30,0.721,31,5.059,32,1.49,33,3.763,34,5.047,35,2.354,36,3.278,37,2.59,38,3.278,39,2.354,40,3.877,41,3.877,42,3.763,43,2.354,44,2.354,45,3.278,46,3.877,47,3.877,48,2.489,49,3.877,50,3.877,51,3.278,52,3.877,53,3.877,54,3.877,55,3.877,56,3.877,57,2.884,58,2.884,59,0.347,60,0.15,61,1.14,62,3.877,63,3.877,64,0.019,65,0.019]],["title/injectables/AuthApi.html",[66,1.228,67,1.904]],["body/injectables/AuthApi.html",[7,0.027,12,0.285,13,0.254,14,0.254,17,1.827,21,0.561,23,1.593,24,1.593,25,0.376,26,1.305,28,1.146,30,0.606,32,1.227,34,5.388,35,1.938,43,1.938,59,0.518,60,0.172,64,0.016,65,0.016,66,1.593,67,3.592,68,1.777,69,2.374,70,0.318,71,4.438,72,0.224,73,0.866,74,3.08,75,2.756,76,5.794,77,3.407,78,5.794,79,2.111,80,3.192,81,6.274,82,4.438,83,2.111,84,2.111,85,3.192,86,4.9,87,3.192,88,2.964,89,2.831,90,4.662,91,1.326,92,4.438,93,3.192,94,3.192,95,2.374,96,1.938,97,3.752,98,3.752,99,3.795,100,2.374,101,5.794,102,0.616,103,1.832,104,4.438,105,3.192,106,2.27,107,2.111,108,2.699,109,3.192,110,3.192,111,2.699,112,2.132,113,3.192,114,3.192,115,3.192,116,2.699,117,3.192,118,1.938,119,2.699]],["title/modules/AuthApiModule.html",[0,1.904,6,1.904]],["body/modules/AuthApiModule.html",[0,3.11,2,2.523,3,3.11,6,3.729,7,0.026,9,3.731,10,3.027,11,3.027,12,0.405,13,0.361,14,0.361,16,3.371,30,0.695,32,1.741,33,4.155,35,2.752,42,4.155,43,2.752,58,4.155,59,0.405,60,0.176,64,0.021,65,0.021,67,3.857,120,3.832,121,3.832,122,3.832,123,4.532,124,5.585,125,4.532]],["title/injectables/AuthMiddleware.html",[44,2.077,66,1.228]],["body/injectables/AuthMiddleware.html",[7,0.026,12,0.315,13,0.281,14,0.281,17,1.954,21,0.522,23,1.704,24,1.704,25,0.29,26,1.396,28,1.264,30,0.59,32,1.353,44,3.951,59,0.424,60,0.184,61,1.396,64,0.018,65,0.018,66,1.704,67,3.575,68,1.96,70,0.35,72,0.247,74,1.808,75,1.675,77,3.586,79,2.257,83,2.257,84,2.257,88,3.17,89,2.95,96,2.882,99,2.619,100,2.619,102,0.573,103,2.063,107,2.554,108,2.977,112,2.352,126,2.977,127,4.746,128,4.746,129,3.521,130,3.521,131,4.746,132,5.072,133,5.745,134,5.998,135,5.998,136,5.998,137,3.521,138,4.746,139,2.977,140,5.369,141,5.745,142,2.619,143,3.521,144,2.619,145,2.619,146,3.521,147,2.257,148,3.993,149,2.373,150,2.352,151,2.619,152,3.521,153,3.521,154,3.521]],["title/classes/CreateParkPlaceReq.html",[60,0.133,155,2.285]],["body/classes/CreateParkPlaceReq.html",[7,0.027,12,0.303,13,0.27,14,0.27,21,0.622,25,0.408,30,0.672,59,0.413,60,0.204,64,0.017,65,0.017,70,0.337,72,0.238,73,0.902,91,1.266,102,0.683,147,2.199,155,4.311,156,0.932,157,3.594,158,1.424,159,2.057,160,3.953,161,3.953,162,3.919,163,3.953,164,2.69,165,1.663,166,2.374,167,3.388,168,1.372,169,1.74,170,3.388,171,2.52,172,3.388,173,3.148,174,3.388,175,3.388,176,3.388,177,2.865,178,2.274,179,1.138,180,3.388,181,4.623,182,3.439,183,2.057,184,3.088,185,2.263,186,2.263,187,2.865,188,1.886,189,2.865,190,2.263,191,1.886,192,2.865,193,3.388,194,2.263,195,2.263,196,2.865]],["title/classes/CreateParkReq.html",[60,0.133,197,1.904]],["body/classes/CreateParkReq.html",[7,0.027,12,0.245,13,0.218,14,0.218,21,0.601,25,0.407,30,0.437,59,0.46,60,0.212,64,0.015,65,0.015,70,0.272,72,0.192,73,0.776,91,1.565,102,0.779,156,0.753,157,3.462,158,1.565,165,1.607,166,2.927,169,1.95,178,2.43,179,0.919,182,2.036,183,1.662,197,3.475,198,1.662,199,2.959,200,3.572,201,3.572,202,3.462,203,3.572,204,3.318,205,2.736,206,2.736,207,2.736,208,2.736,209,2.736,210,2.736,211,3.363,212,3.363,213,3.363,214,3.363,215,3.363,216,2.736,217,2.736,218,2.736,219,2.657,220,2.042,221,3.363,222,3.363,223,3.363,224,3.363,225,2.314,226,2.314,227,1.828,228,2.036,229,3.79,230,1.25,231,2.036,232,1.638,233,1.428,234,2.042,235,0.86]],["title/classes/CreateParkResp.html",[60,0.133,229,2.077]],["body/classes/CreateParkResp.html",[7,0.027,12,0.234,13,0.209,14,0.209,21,0.655,25,0.41,30,0.424,59,0.451,60,0.208,64,0.014,65,0.014,70,0.261,72,0.184,73,0.752,91,1.576,102,0.773,156,0.721,157,3.691,158,1.576,165,1.751,166,2.348,169,1.948,178,2.558,179,0.88,182,1.95,183,1.592,197,3.316,198,1.592,199,1.95,200,3.525,201,3.525,202,3.261,203,3.525,204,3.41,211,2.217,212,2.217,213,2.217,214,2.217,215,2.217,219,1.751,220,1.346,221,3.26,222,3.26,223,3.26,224,3.26,225,2.217,226,2.217,227,2.575,228,2.868,229,3.805,230,1.687,231,2.868,232,2.211,233,1.81,234,2.758,235,1.211,236,2.622,237,2.622,238,2.622,239,2.622,240,2.622,241,2.622,242,2.622,243,2.622]],["title/classes/CreateReservePlaceReq.html",[60,0.133,244,2.285]],["body/classes/CreateReservePlaceReq.html",[7,0.026,12,0.37,13,0.329,14,0.329,21,0.58,25,0.373,30,0.58,59,0.471,60,0.225,64,0.02,65,0.02,70,0.411,72,0.29,73,1.029,89,2.707,102,0.636,149,2.33,156,1.137,157,3.525,159,2.51,165,1.55,166,2.707,168,1.184,171,3.074,173,2.935,177,3.495,178,2.231,179,1.388,183,2.51,233,2.428,244,4.219,245,2.761,246,3.922,247,2.703,248,5.272,249,5.272,250,5.805,251,3.521]],["title/classes/GetParkParams.html",[60,0.133,252,1.904]],["body/classes/GetParkParams.html",[7,0.027,12,0.26,13,0.232,14,0.232,21,0.319,25,0.401,26,1.221,30,0.673,48,1.836,59,0.473,60,0.205,61,1.221,64,0.015,65,0.015,70,0.289,72,0.204,73,0.81,91,1.441,102,0.773,149,1.836,156,0.799,158,1.6,168,0.653,169,1.801,173,2.698,178,2.46,179,0.976,184,2.774,185,1.941,198,1.764,200,1.764,201,2.522,202,2.522,203,1.764,204,1.764,219,1.941,220,2.133,230,1.305,232,1.197,233,1.899,234,1.492,246,2.161,251,2.774,252,2.944,253,1.975,254,3.089,255,3.089,256,2.873,257,2.906,258,1.618,259,2.305,260,1.941,261,1.117,262,1.764,263,1.74,264,1.941,265,2.161,266,2.944,267,2.161,268,2.944,269,2.161,270,1.764,271,3.321,272,1.764,273,2.161,274,3.089,275,2.457,276,2.522,277,3.089,278,2.312,279,2.522]],["title/classes/GetParkPlaceInfoResp.html",[60,0.133,266,1.904]],["body/classes/GetParkPlaceInfoResp.html",[7,0.026,12,0.327,13,0.291,14,0.291,21,0.641,25,0.395,30,0.535,59,0.435,60,0.189,61,1.608,64,0.018,65,0.018,70,0.363,72,0.256,73,0.949,102,0.704,156,1.005,158,1.533,165,1.714,168,1.432,169,1.927,178,2.519,179,1.226,220,1.875,228,3.617,230,1.908,232,2.251,233,1.963,253,2.888,259,1.737,263,2.093,264,2.439,266,3.548,280,3.087,281,4.863,282,3.652,283,3.652,284,3.651,285,4.863,286,4.863,287,3.651,288,4.863,289,5.83,290,3.651,291,4.863,292,3.651,293,4.863]],["title/classes/GetParkPlaceResp.html",[60,0.133,268,1.904]],["body/classes/GetParkPlaceResp.html",[7,0.027,12,0.289,13,0.257,14,0.257,21,0.64,25,0.408,30,0.662,59,0.4,60,0.173,61,1.51,64,0.017,65,0.017,70,0.321,72,0.227,73,0.873,91,1.235,102,0.703,147,2.442,156,0.889,158,1.514,159,1.962,160,3.887,161,3.887,162,3.748,163,3.429,164,2.768,165,1.711,166,2.636,168,1.414,169,1.77,171,2.403,173,2.858,178,2.418,179,1.085,184,2.989,185,2.158,186,2.158,188,1.799,189,2.732,190,2.158,192,2.732,194,2.158,195,2.158,196,2.732,230,1.829,253,2.864,259,1.537,261,2.13,262,1.962,268,3.503,272,2.717,294,4.475,295,4.475,296,3.23,297,3.23,298,4.475,299,3.23,300,3.23]],["title/classes/GetParkResp.html",[60,0.133,271,1.756]],["body/classes/GetParkResp.html",[7,0.027,12,0.214,13,0.191,14,0.191,21,0.665,25,0.408,26,1.417,30,0.638,48,2.131,59,0.431,60,0.187,61,1.274,64,0.013,65,0.013,70,0.238,72,0.168,73,0.703,91,1.395,102,0.741,147,2.459,149,1.593,156,0.659,158,1.619,165,1.778,166,2.225,168,0.538,169,1.829,173,2.412,178,2.481,179,0.804,184,2.407,185,1.599,198,1.454,200,2.631,201,3.139,202,3.139,203,2.631,204,2.631,219,2.407,220,2.225,230,1.624,232,1.784,233,1.95,234,2.225,246,2.681,251,2.407,252,2.412,253,2.92,254,1.781,255,1.781,256,1.85,258,1.333,259,2.061,260,1.599,261,0.92,262,1.454,263,1.95,264,1.599,265,1.781,266,2.878,267,1.781,268,2.878,269,1.781,270,2.188,271,3.23,272,2.188,273,2.681,274,3.586,275,3.047,276,2.927,277,3.586,278,2.684,279,3.139,301,2.395,302,2.395,303,2.395,304,2.395,305,2.395,306,3.047,307,2.395,308,2.395,309,2.395,310,2.395,311,2.395]],["title/classes/GetParksParams.html",[60,0.133,312,1.904]],["body/classes/GetParksParams.html",[7,0.027,12,0.382,13,0.341,14,0.341,21,0.47,25,0.378,26,1.584,30,0.592,59,0.554,60,0.24,64,0.02,65,0.02,70,0.425,72,0.3,73,1.051,91,1.418,102,0.65,103,1.934,156,1.176,178,2.069,179,1.435,253,2.562,256,3.396,270,2.595,271,3.179,312,3.446,313,3.179,314,4.274,315,2.855,316,3.27,317,3.581,318,3.179]],["title/classes/GetParksResp.html",[60,0.133,317,2.077]],["body/classes/GetParksResp.html",[7,0.027,12,0.38,13,0.339,14,0.339,21,0.468,25,0.377,30,0.59,59,0.553,60,0.24,64,0.02,65,0.02,70,0.423,72,0.299,73,1.048,91,1.292,102,0.648,103,1.528,147,2.024,156,1.171,165,1.251,178,2.064,179,1.429,253,2.554,256,3.021,270,3.261,271,3.272,306,3.598,312,3.276,313,3.165,315,2.842,316,3.753,317,3.753,318,4.377,319,4.255]],["title/classes/GetReservedPlaceResp.html",[60,0.133,320,2.285]],["body/classes/GetReservedPlaceResp.html",[7,0.027,12,0.264,13,0.236,14,0.236,21,0.662,25,0.402,30,0.462,48,1.858,59,0.376,60,0.163,61,1.439,64,0.016,65,0.016,70,0.294,72,0.208,73,0.82,102,0.727,147,2.535,149,2.356,156,0.813,159,1.795,165,1.77,166,2.892,168,1.315,169,1.721,173,3.135,178,2.44,179,0.993,230,1.892,232,2.319,233,2.435,234,2.513,235,1.839,245,3.02,247,2.807,251,3.56,253,2.927,262,1.795,270,2.553,320,4.241,321,2.195,322,4.189,323,3.268,324,2.956,325,2.971,326,2.956,327,4.204,328,2.956,329,2.956,330,2.956,331,2.956,332,4.204,333,2.956,334,2,335,2.956]],["title/entities/Park.html",[158,0.823,235,1.075]],["body/entities/Park.html",[7,0.027,12,0.233,13,0.207,14,0.207,21,0.678,25,0.408,30,0.552,48,1.694,59,0.343,60,0.149,61,1.127,64,0.014,65,0.014,70,0.259,72,0.183,73,0.748,91,1.347,102,0.745,118,2.327,158,1.645,165,1.814,168,1.022,169,1.861,200,2.763,201,3.25,202,2.763,203,2.763,204,2.763,230,1.682,231,2.85,232,2.204,233,2.01,234,2.748,235,1.938,261,2.225,263,2.273,265,1.934,272,3.048,273,2.85,276,2.327,279,3.25,336,1.448,337,2.199,338,3.831,339,3.25,340,2.6,341,3.746,342,3.25,343,3.734,344,2.6,345,2.763,346,2.6,347,5.02,348,5.02,349,2.6,350,2.6,351,3.24,352,2.6,353,2.6,354,3.048,355,2.6,356,2.6,357,2.6,358,2.6,359,3.831,360,3.831,361,2.6,362,4.55,363,3.847,364,2.6,365,1.149,366,1.737,367,1.448,368,4.55,369,2.6,370,2.199]],["title/classes/ParkEdgesUtils.html",[60,0.133,371,2.077]],["body/classes/ParkEdgesUtils.html",[7,0.026,12,0.314,13,0.28,14,0.28,17,1.952,21,0.59,23,1.926,24,1.926,25,0.328,26,1.577,28,1.926,59,0.48,60,0.184,64,0.018,65,0.018,70,0.35,72,0.247,91,1.641,102,0.648,103,1.926,106,2.543,156,0.967,191,2.986,258,3.196,263,1.702,279,2.878,325,3.898,371,3.75,372,3.834,373,2.614,374,4.74,375,6.682,376,5.741,377,5.741,378,5.741,379,4.74,380,3.514,381,5.069,382,4.74,383,3.514,384,3.078,385,4.74,386,3.514,387,3.514,388,3.514,389,3.514,390,3.514]],["title/entities/ParkPlace.html",[235,1.075,261,1.314]],["body/entities/ParkPlace.html",[7,0.027,12,0.256,13,0.228,14,0.228,21,0.655,25,0.411,30,0.655,59,0.367,60,0.159,61,1.207,64,0.015,65,0.015,70,0.284,72,0.201,73,0.801,91,1.155,102,0.72,147,1.359,149,1.263,158,1.551,160,3.712,161,3.712,162,3.771,163,3.207,164,2.752,165,1.753,168,1.37,169,1.701,186,1.908,188,1.591,190,1.908,191,2.922,230,1.746,235,1.818,247,1.263,259,1.359,261,2.499,262,1.735,272,3.187,321,2.454,336,1.591,339,3.375,341,3.187,345,2.916,351,2.416,354,3.187,363,3.47,365,1.263,367,1.591,391,4.536,392,2.125,393,3.47,394,5.558,395,3.47,396,2.857,397,2.857,398,2.857,399,2.125,400,4.103,401,2.857,402,2.857,403,2.857,404,4.103,405,2.857,406,3.052,407,2.416,408,4.801,409,2.741,410,2.857]],["title/entities/ParkPlacesInfo.html",[235,1.075,263,1.228]],["body/entities/ParkPlacesInfo.html",[7,0.026,12,0.3,13,0.267,14,0.267,21,0.648,25,0.398,30,0.575,59,0.41,60,0.178,61,1.35,64,0.017,65,0.017,70,0.333,72,0.235,73,0.896,102,0.712,118,2.787,158,1.595,165,1.734,168,1.368,169,1.894,220,1.721,230,1.853,232,2.428,233,2.117,235,1.995,259,1.594,263,2.312,264,2.238,282,3.938,283,3.938,336,1.866,339,3.58,341,2.787,342,3.178,343,3.414,345,3.178,354,2.787,365,1.481,391,4.529,393,3.881,399,2.493,406,3.414,407,2.834,411,2.493,412,4.589,413,3.351,414,3.351,415,5.629,416,3.351,417,3.351,418,4.589,419,3.351,420,5.234]],["title/controllers/ParkingController.html",[39,2.077,421,2.285]],["body/controllers/ParkingController.html",[7,0.027,12,0.126,13,0.112,14,0.112,17,0.971,21,0.526,23,1.717,24,1.939,25,0.353,26,1.406,28,1.717,30,0.662,32,0.541,39,3.345,48,1.574,57,1.046,59,0.211,60,0.091,64,0.009,65,0.009,70,0.495,72,0.099,74,0.722,75,0.669,77,4.055,79,0.669,83,0.669,84,0.669,89,2.773,102,0.6,103,2.013,106,2.345,107,2.169,111,2.574,112,3.045,116,3.354,119,2.574,148,3.82,149,2.387,150,0.94,155,2.867,158,1.435,165,1.406,168,1.279,169,1.893,179,0.472,197,2.39,199,2.649,227,2.379,229,1.848,230,1.981,244,2.867,245,1.121,247,1.897,252,2.208,254,3.925,256,2.204,258,2.208,259,0.669,260,0.94,266,1.695,267,1.046,268,1.695,269,2.649,271,1.211,277,2.649,278,1.983,282,0.94,283,0.94,312,2.208,315,1.575,316,2.163,317,1.848,318,1.046,320,2.649,321,1.253,323,1.575,334,1.694,365,0.622,371,0.854,384,2.637,421,2.033,422,1.19,423,1.407,424,2.033,425,2.358,426,2.358,427,3.044,428,2.574,429,3.044,430,2.574,431,2.574,432,2.574,433,2.574,434,2.574,435,1.407,436,1.407,437,2.358,438,1.407,439,1.994,440,3.855,441,1.19,442,1.407,443,1.407,444,5.4,445,2.358,446,1.407,447,3.193,448,1.407,449,1.407,450,1.407,451,1.407,452,3.562,453,1.407,454,1.407,455,1.407,456,1.407,457,2.358,458,1.407,459,1.994,460,2.358,461,1.19,462,1.407,463,1.407,464,3.562,465,3.562,466,1.407,467,1.407,468,1.407,469,1.407,470,1.407,471,1.407,472,1.407,473,1.19,474,1.407,475,1.407,476,1.19,477,1.407,478,3.354,479,1.407,480,1.407,481,1.407,482,1.994,483,1.407,484,1.407,485,1.407,486,1.407,487,2.358,488,2.358,489,1.407,490,4.972,491,1.407,492,1.407,493,1.407,494,1.407,495,1.407,496,2.358,497,0.94,498,1.407,499,1.407,500,1.407,501,0.94,502,1.407,503,0.94,504,1.407,505,1.848,506,0.94,507,1.19,508,2.033,509,1.407,510,2.951,511,1.407,512,2.033,513,1.407,514,1.407,515,2.574,516,3.354,517,1.19,518,1.695,519,1.19,520,1.407,521,1.407,522,1.994,523,3.044,524,4.559,525,1.407,526,1.407,527,1.407,528,1.19,529,1.407,530,2.358,531,3.562,532,3.044,533,4.783,534,2.358,535,3.012,536,1.407,537,3.562,538,1.407,539,1.407,540,2.358,541,1.407,542,1.407,543,1.407,544,1.407,545,3.044,546,3.044,547,1.407,548,1.046,549,1.407,550,1.407,551,1.407,552,2.358,553,1.407,554,2.358,555,1.407,556,1.407,557,1.407,558,1.407,559,2.358,560,1.407,561,1.407,562,1.19,563,1.407,564,1.407,565,1.407,566,1.407,567,1.407,568,1.407,569,1.407,570,1.407,571,1.407]],["title/modules/ParkingModule.html",[0,1.904,8,2.077]],["body/modules/ParkingModule.html",[0,2.828,2,2.172,3,2.828,6,3.541,7,0.026,8,3.988,9,3.393,10,2.606,11,2.606,12,0.349,13,0.311,14,0.311,16,3.779,30,0.753,32,1.499,33,3.779,35,2.369,36,3.299,37,2.606,38,3.299,39,3.43,42,3.779,43,2.369,44,2.369,45,3.299,57,3.779,58,3.779,59,0.349,60,0.151,64,0.019,65,0.019,158,1.222,168,1.141,261,1.952,263,1.824,321,2.092,366,3.393,367,2.828,518,3.541,519,3.299,572,3.299,573,3.901,574,3.299,575,3.901,576,3.901,577,4.295,578,3.299,579,4.295,580,2.828,581,3.901,582,2.902,583,3.901]],["title/injectables/ParkingService.html",[66,1.228,518,1.904]],["body/injectables/ParkingService.html",[7,0.027,12,0.365,13,0.102,14,0.102,17,0.897,21,0.599,23,1.958,24,1.958,25,0.369,26,1.603,28,1.921,30,0.599,32,0.492,37,0.855,48,0.962,59,0.195,60,0.084,64,0.008,65,0.008,66,0.782,68,0.713,70,0.127,72,0.09,74,2.688,75,1.594,77,3.704,79,1.036,83,1.036,84,1.036,89,3.185,91,0.683,102,0.658,103,2.154,106,2.524,107,2.357,112,2.73,148,2.795,149,1.661,158,1.455,160,1.898,161,1.898,162,2.648,163,1.898,164,1.594,168,1.265,169,1.983,186,0.855,188,0.713,190,0.855,195,2.239,197,2.092,227,3.066,230,1.557,232,0.527,233,1.467,245,1.036,247,1.482,252,2.092,255,3.243,256,1.118,258,0.713,259,0.609,260,0.855,261,1.444,263,0.46,278,1.212,282,2.51,283,2.51,312,2.092,315,1.454,316,1.322,321,0.897,322,0.952,323,2.912,334,1.036,342,0.777,365,0.566,366,0.855,367,1.212,370,1.083,371,0.777,424,1.454,428,2.402,430,2.402,431,2.402,432,2.402,433,2.402,434,2.834,439,1.841,440,2.239,441,1.083,447,2.493,459,1.841,461,1.083,473,1.083,476,1.083,478,4.689,482,1.841,505,0.777,506,0.855,507,1.083,515,1.083,516,1.841,517,1.083,518,3.25,522,1.841,562,1.083,577,1.841,578,1.083,579,1.083,584,1.083,585,2.177,586,2.841,587,2.177,588,2.841,589,2.841,590,2.841,591,2.841,592,2.113,593,1.28,594,4.825,595,3.352,596,3.352,597,3.352,598,1.28,599,2.841,600,1.28,601,3.881,602,1.28,603,3.352,604,2.177,605,1.28,606,3.352,607,5.35,608,1.28,609,1.28,610,1.28,611,1.28,612,1.28,613,1.28,614,1.28,615,2.177,616,2.177,617,1.28,618,1.28,619,1.28,620,1.28,621,1.28,622,2.177,623,1.28,624,1.28,625,1.28,626,1.28,627,1.28,628,1.62,629,1.28,630,1.28,631,1.28,632,1.28,633,1.28,634,1.28,635,1.28,636,1.28,637,2.177,638,2.177,639,2.177,640,1.28,641,1.28,642,3.352,643,2.177,644,1.28,645,1.28,646,1.28,647,1.28,648,1.28,649,2.177,650,1.28,651,2.177,652,2.177,653,1.28,654,1.28,655,2.841,656,1.28,657,1.28,658,1.28,659,1.28,660,1.28,661,1.28,662,1.28,663,1.28,664,1.28,665,1.28,666,1.28,667,1.28,668,1.28,669,1.28,670,1.28,671,1.28,672,1.28,673,2.177,674,1.28,675,2.177,676,1.28,677,2.177,678,2.177,679,1.28,680,1.28,681,1.28,682,1.28,683,1.28,684,1.28,685,1.28,686,1.28,687,1.28,688,1.28,689,1.28]],["title/classes/ParkingServiceError.html",[60,0.133,505,2.077]],["body/classes/ParkingServiceError.html",[7,0.026,12,0.334,13,0.297,14,0.297,21,0.608,23,1.34,24,2.256,25,0.412,26,1.097,28,1.34,59,0.494,60,0.191,64,0.018,65,0.018,70,0.371,72,0.262,73,0.963,75,1.775,79,1.775,83,2.346,84,2.346,91,1.329,102,0.667,103,1.34,106,1.536,156,1.027,168,1.374,191,2.077,245,2.346,247,2.18,334,2.346,424,3.295,505,3.95,506,4.345,548,2.775,592,2.775,690,2.775,691,4.933,692,6.582,693,5.526,694,4.933,695,4.933,696,4.933,697,3.731,698,3.731,699,4.933,700,3.155,701,3.155,702,3.155,703,3.155,704,3.155,705,3.155,706,3.155,707,3.155,708,3.731,709,4.933]],["title/classes/Point.html",[60,0.133,164,1.627]],["body/classes/Point.html",[7,0.026,12,0.397,13,0.353,14,0.353,21,0.606,25,0.411,30,0.488,59,0.493,60,0.243,61,1.763,64,0.02,65,0.02,70,0.441,72,0.312,73,1.076,102,0.665,156,1.22,164,3.253,187,5.304,188,2.469,194,4.005,710,3.75,711,6.273,712,4.435,713,5.512,714,4.435,715,4.435]],["title/classes/PointTransformer.html",[60,0.133,409,2.285]],["body/classes/PointTransformer.html",[7,0.026,12,0.336,13,0.299,14,0.299,17,2.039,21,0.544,23,1.778,24,1.778,25,0.302,26,1.456,28,1.778,30,0.544,51,4.188,59,0.443,60,0.229,61,1.63,64,0.018,65,0.018,70,0.373,72,0.264,91,0.903,102,0.598,103,1.778,106,2.427,107,2.356,156,1.033,164,3.21,188,2.09,194,2.507,365,1.659,384,3.146,409,4.092,716,3.174,717,4.681,718,4.952,719,6.653,720,5.894,721,4.952,722,3.753,723,4.984,724,4.952,725,4.952,726,3.753,727,4.952,728,5.894,729,5.894,730,3.753]],["title/entities/ReservedPlace.html",[235,1.075,321,1.409]],["body/entities/ReservedPlace.html",[7,0.027,12,0.485,13,0.214,14,0.214,21,0.672,25,0.406,30,0.509,48,1.732,59,0.351,60,0.152,64,0.015,65,0.015,70,0.267,72,0.188,73,0.765,102,0.738,118,3.094,158,1.114,165,1.798,168,1.415,169,1.665,230,1.837,232,2.232,233,2.407,234,2.783,235,1.952,245,1.864,247,2.584,261,2.388,276,2.38,278,2.182,321,2.67,322,4.032,323,3.094,325,3.291,334,1.864,336,1.493,339,2.813,341,3.773,342,3.712,343,2.915,345,2.813,354,3.094,365,1.185,366,1.791,367,1.493,392,1.995,399,1.995,406,2.915,580,3.337,731,4.622,732,3.314,733,2.682,734,2.682,735,2.682,736,2.682,737,3.919,738,2.682,739,2.268,740,3.919,741,2.682,742,2.682,743,3.919,744,2.682,745,2.682,746,3.919,747,3.314]],["title/entities/ReservedPlaceInfo.html",[235,1.075,580,1.904]],["body/entities/ReservedPlaceInfo.html",[7,0.026,12,0.318,13,0.284,14,0.284,21,0.635,25,0.393,30,0.526,48,2.551,59,0.428,60,0.185,64,0.018,65,0.018,70,0.354,72,0.25,73,0.933,102,0.697,165,1.697,168,1.423,169,1.588,230,1.892,233,2.226,235,1.948,247,1.574,274,4.293,276,3.505,321,2.714,334,2.275,336,1.983,339,2.162,341,3.505,342,3.656,345,3.279,354,2.904,365,1.574,367,1.983,411,2.649,580,3.631,731,4.479,732,4.044,739,3.011,747,4.044,748,5.399,749,5.399,750,3.561,751,4.782,752,3.561,753,4.782,754,3.561,755,4.782,756,3.561]],["title/guards/RoleGuard.html",[501,2.285,757,2.077]],["body/guards/RoleGuard.html",[7,0.027,12,0.292,13,0.261,14,0.261,17,1.858,21,0.496,23,1.62,24,1.62,25,0.276,26,1.327,28,1.174,30,0.694,32,1.257,59,0.404,60,0.175,61,1.327,64,0.017,65,0.017,66,1.62,70,0.325,72,0.23,74,2.317,75,1.555,79,2.146,83,2.146,84,2.146,88,3.721,89,1.679,90,4.711,95,2.432,96,2.74,102,0.545,103,1.62,106,2.294,107,2.78,132,2.765,139,2.765,142,2.432,144,3.357,145,2.432,147,2.146,150,2.184,151,2.432,278,2.512,325,3.383,334,2.146,497,3.014,501,4.137,503,3.014,582,2.432,628,3.357,757,2.74,758,3.27,759,2.765,760,3.816,761,5.845,762,3.27,763,6.311,764,3.27,765,4.512,766,4.942,767,3.27,768,4.512,769,4.512,770,5.845,771,2.765,772,3.357,773,3.27,774,3.27,775,2.432,776,3.27,777,2.432,778,3.357,779,5.167,780,3.27,781,3.27,782,3.27,783,3.27,784,3.27,785,3.27,786,2.432,787,3.27,788,3.27]],["title/injectables/ValueOrArrayToArray.html",[66,1.228,508,2.285]],["body/injectables/ValueOrArrayToArray.html",[7,0.026,12,0.311,13,0.277,14,0.277,17,1.94,21,0.518,23,1.691,24,1.691,25,0.288,26,1.385,28,1.25,29,4.254,30,0.383,32,1.338,59,0.421,60,0.183,61,1.385,64,0.017,65,0.017,66,1.691,68,1.939,70,0.346,72,0.245,74,2.419,75,2.24,79,2.24,83,2.24,84,2.24,102,0.569,103,2.054,106,1.94,107,1.656,384,3.4,508,4.206,510,4.829,717,4.581,789,4.514,790,2.944,791,3.482,792,5.599,793,5.719,794,3.482,795,6.405,796,3.482,797,5.338,798,3.146,799,3.983,800,3.82,801,5.052,802,3.482,803,4.71,804,4.514,805,3.983,806,5.719,807,3.482,808,3.482,809,5.338]],["title/injectables/ValuesInEnumPipe.html",[66,1.228,512,2.285]],["body/injectables/ValuesInEnumPipe.html",[7,0.026,12,0.311,13,0.277,14,0.277,17,1.937,21,0.517,23,1.689,24,1.689,25,0.287,26,1.383,28,1.248,29,4.442,30,0.382,32,1.336,59,0.421,60,0.182,61,1.383,64,0.017,65,0.017,66,1.689,68,1.935,70,0.346,72,0.244,74,2.738,75,2.537,79,2.238,83,2.238,84,2.238,88,3.142,91,1.54,102,0.568,103,2.144,106,1.937,191,3.182,325,2.857,381,3.978,384,3.425,512,4.204,535,3.978,628,3.499,717,4.579,792,5.597,798,3.562,799,3.978,800,3.817,801,5.049,804,4.509,805,2.939,810,4.509,811,2.939,812,3.475,813,5.715,814,5.715,815,3.475,816,3.475,817,5.333,818,3.475,819,3.475,820,3.475,821,3.475]],["title/coverage.html",[822,3.462]],["body/coverage.html",[7,0.026,14,0.261,25,0.2,39,1.993,44,1.993,60,0.261,64,0.017,65,0.017,66,2.101,67,1.827,69,2.441,126,2.775,149,1.45,155,2.192,157,3.388,158,1.342,159,3.388,164,1.561,168,1.163,197,1.827,198,3.388,229,1.993,235,1.839,244,2.192,245,2.151,252,1.827,253,2.949,261,1.261,263,1.178,266,1.827,268,1.827,271,1.685,280,2.775,312,1.827,313,3.365,317,1.993,320,2.192,321,1.351,337,2.775,371,1.993,372,2.192,373,2.441,391,3.365,392,3.365,409,2.192,411,3.365,421,2.192,422,2.775,440,2.192,497,2.192,501,2.192,505,1.993,508,2.192,510,2.441,512,2.192,518,1.827,580,1.827,584,2.775,690,2.441,710,2.775,716,2.775,731,3.365,757,1.993,759,2.775,772,2.441,775,2.441,777,2.441,789,2.775,790,2.775,798,3.021,810,2.775,811,2.775,822,2.441,823,3.281,824,3.281,825,3.281,826,7.011,827,4.523,828,3.825,829,5.176,830,6.488,831,2.775,832,2.775,833,6.316,834,2.775,835,2.775,836,2.775,837,2.775,838,4.523,839,4.523,840,4.523,841,5.176,842,3.281,843,3.281,844,3.281,845,3.281,846,3.281]],["title/dependencies.html",[3,2.288,847,2.422]],["body/dependencies.html",[3,2.579,7,0.026,32,1.78,35,2.813,37,3.094,43,2.813,60,0.219,64,0.021,65,0.021,95,3.446,142,4.211,179,1.556,183,2.813,365,2.048,395,3.917,582,3.446,771,3.917,800,3.094,848,4.632,849,6.369,850,4.632,851,4.632,852,4.632,853,4.632,854,4.632,855,4.632,856,4.632,857,4.632,858,4.632,859,4.632,860,4.632,861,4.632,862,4.632,863,4.632,864,4.632,865,4.632,866,4.632,867,4.632,868,4.632,869,4.632,870,4.632,871,4.632,872,4.632]],["title/miscellaneous/enumerations.html",[873,1.362,874,3.475]],["body/miscellaneous/enumerations.html",[7,0.026,25,0.332,64,0.02,65,0.02,72,0.304,158,1.042,162,3.299,168,1.49,191,3.024,245,2.584,247,2.401,256,2.225,258,3.024,263,1.95,279,3.299,316,2.631,334,2.959,372,2.894,373,4.041,384,3.537,424,2.894,503,3.628,506,3.628,548,3.223,592,3.223,690,3.223,700,3.664,701,3.664,702,3.664,703,3.664,704,3.664,705,3.664,706,3.664,707,3.664,873,2.061,874,3.664,875,3.664,876,4.333,877,4.333,878,5.432,879,4.333,880,4.333,881,4.333,882,4.333,883,5.432,884,5.432,885,4.333,886,5.432]],["title/miscellaneous/functions.html",[873,1.362,887,3.475]],["body/miscellaneous/functions.html",[7,0.025,23,1.782,24,1.782,25,0.303,26,1.459,28,1.782,64,0.022,65,0.022,72,0.349,91,1.42,96,3.013,723,4.196,775,4.39,777,4.685,778,3.691,786,3.691,798,3.314,834,4.196,835,4.99,836,4.196,837,5.326,873,2.36,887,4.196,888,4.963,889,4.963,890,4.963,891,4.963,892,5.901]],["title/index.html",[72,0.201,893,2.864,894,2.864]],["body/index.html",[7,0.026,13,0.345,64,0.02,65,0.02,70,0.431,594,3.664,760,5.528,822,3.223,895,4.333,896,4.333,897,5.432,898,4.333,899,4.333,900,4.333,901,4.333,902,4.333,903,4.333,904,5.934,905,4.333,906,4.333,907,4.333,908,6.634,909,4.333,910,4.333,911,4.333,912,4.333,913,4.333,914,5.432,915,4.333,916,4.333,917,4.333,918,4.333,919,5.432,920,5.432,921,4.333,922,4.333,923,4.333,924,5.432,925,5.432,926,4.333,927,4.333,928,4.333,929,4.333,930,4.333,931,3.664,932,4.333,933,4.333,934,4.333,935,4.333,936,4.333,937,4.333,938,4.333,939,4.333,940,4.333,941,4.333,942,3.664,943,4.333,944,4.333,945,4.333,946,4.333,947,4.333,948,4.333,949,3.664]],["title/modules.html",[2,2.591]],["body/modules.html",[1,3.509,2,2.925,6,2.925,7,0.023,8,3.19,64,0.023,65,0.023,931,5.454,950,6.45,951,6.45,952,6.45]],["title/overview.html",[953,3.935]],["body/overview.html",[1,4.444,2,2.592,3,3.161,4,3.936,5,3.936,6,3.75,7,0.025,8,4.09,9,3.793,10,3.109,11,3.109,64,0.021,65,0.021,67,3.75,68,2.592,120,3.936,121,3.936,122,3.936,156,1.281,195,3.793,336,2.592,421,3.109,518,3.411,572,3.936,574,3.936,757,2.827,953,3.936,954,4.655,955,5.678,956,4.655]],["title/properties.html",[73,0.802,847,2.422]],["body/properties.html",[7,0.025,64,0.023,65,0.023,70,0.53,73,1.04,942,4.506,949,4.506,957,5.328,958,5.328,959,5.328]],["title/miscellaneous/typealiases.html",[873,1.362,960,4.11]],["body/miscellaneous/typealiases.html",[7,0.023,25,0.415,64,0.021,65,0.021,69,3.454,72,0.326,86,4.794,97,4.794,98,3.927,99,3.454,100,4.218,158,1.364,168,1.274,220,2.911,261,2.179,263,2.036,321,2.335,372,3.787,580,3.157,601,5.693,873,2.209,875,4.794,961,4.644,962,6.121,963,4.644,964,6.374,965,6.374,966,4.644,967,4.644,968,4.644,969,4.644,970,4.644]],["title/miscellaneous/variables.html",[873,1.362,971,3.475]],["body/miscellaneous/variables.html",[7,0.026,25,0.269,64,0.02,65,0.02,72,0.309,89,2.818,91,1.059,96,3.332,106,2.461,107,2.976,118,3.63,144,3.276,145,3.276,150,2.942,151,3.276,384,3.069,440,4.3,447,3.276,497,4.494,503,2.942,528,4.64,757,2.674,766,3.724,772,4.082,778,3.276,786,3.276,800,2.942,828,3.724,831,3.724,832,4.64,873,2.095,971,3.724,972,5.488,973,4.404,974,4.404,975,5.488,976,4.404,977,4.404,978,4.404,979,4.404,980,4.404,981,4.404,982,4.404]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":528,"title":{},"body":{"controllers/ParkingController.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":958,"title":{},"body":{"properties.html":{}}}],["0.0.7",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":195,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"injectables/ParkingService.html":{},"overview.html":{}}}],["1/1",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":226,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["12})@isint",{"_index":217,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["15",{"_index":956,"title":{},"body":{"overview.html":{}}}],["15/15",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["18a9d8ee7830",{"_index":215,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["2",{"_index":196,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{}}}],["2.0.0",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":537,"title":{},"body":{"controllers/ParkingController.html":{}}}],["200})@apibearerauth",{"_index":437,"title":{},"body":{"controllers/ParkingController.html":{}}}],["200})@apiparam({name",{"_index":456,"title":{},"body":{"controllers/ParkingController.html":{}}}],["200})@apiquery({enum",{"_index":470,"title":{},"body":{"controllers/ParkingController.html":{}}}],["201",{"_index":452,"title":{},"body":{"controllers/ParkingController.html":{}}}],["201})@apibearerauth",{"_index":445,"title":{},"body":{"controllers/ParkingController.html":{}}}],["3",{"_index":954,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["3d0b",{"_index":212,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["4.3.0",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":955,"title":{},"body":{"overview.html":{}}}],["5.2.1",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["78",{"_index":225,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["78'})@isstring",{"_index":205,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["7946.0.8",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["8.3.4",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["9191",{"_index":214,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["_",{"_index":150,"title":{},"body":{"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["accessors",{"_index":694,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["active",{"_index":768,"title":{},"body":{"guards/RoleGuard.html":{}}}],["addres",{"_index":273,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["address",{"_index":200,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["admin",{"_index":886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":961,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":704,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["amazing",{"_index":932,"title":{},"body":{"index.html":{}}}],["api",{"_index":92,"title":{},"body":{"injectables/AuthApi.html":{}}}],["api/auth.api",{"_index":143,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["apibearerauth",{"_index":490,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apibody",{"_index":491,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apibody({type",{"_index":523,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiparam",{"_index":492,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiparam({name",{"_index":531,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiproperty",{"_index":178,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{}}}],["apiproperty()@islatitude",{"_index":207,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["apiproperty()@islongitude",{"_index":209,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["apiproperty()@isnumber",{"_index":170,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["apiproperty({enum",{"_index":172,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["apiproperty({example",{"_index":166,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{}}}],["apiproperty({type",{"_index":306,"title":{},"body":{"classes/GetParkResp.html":{},"classes/GetParksResp.html":{}}}],["apiquery",{"_index":493,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiquery({enum",{"_index":530,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiresponse",{"_index":494,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiresponse({status",{"_index":565,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apiresponse({type",{"_index":524,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apitags",{"_index":495,"title":{},"body":{"controllers/ParkingController.html":{}}}],["apitags(\"parking",{"_index":520,"title":{},"body":{"controllers/ParkingController.html":{}}}],["app",{"_index":910,"title":{},"body":{"index.html":{}}}],["applications",{"_index":903,"title":{},"body":{"index.html":{}}}],["apply(authmiddleware",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":801,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["array",{"_index":510,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ValueOrArrayToArray.html":{},"coverage.html":{}}}],["array.pipe",{"_index":511,"title":{},"body":{"controllers/ParkingController.html":{}}}],["array.pipe.ts",{"_index":790,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"coverage.html":{}}}],["array.pipe.ts:13",{"_index":796,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["array.pipe.ts:33",{"_index":802,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["arrive",{"_index":751,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["arrivetime",{"_index":748,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["asc",{"_index":657,"title":{},"body":{"injectables/ParkingService.html":{}}}],["async",{"_index":77,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["auth",{"_index":127,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["auth.api",{"_index":125,"title":{},"body":{"modules/AuthApiModule.html":{}}}],["auth/checktoken",{"_index":110,"title":{},"body":{"injectables/AuthApi.html":{}}}],["authapi",{"_index":67,"title":{"injectables/AuthApi.html":{}},"body":{"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"coverage.html":{},"overview.html":{}}}],["authapimodule",{"_index":6,"title":{"modules/AuthApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"modules.html":{},"overview.html":{}}}],["authheader",{"_index":144,"title":{},"body":{"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["authheader.split",{"_index":151,"title":{},"body":{"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["authmiddleware",{"_index":44,"title":{"injectables/AuthMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"modules/ParkingModule.html":{},"coverage.html":{}}}],["author",{"_index":942,"title":{},"body":{"index.html":{},"properties.html":{}}}],["autoloadentities",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":112,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["backers",{"_index":933,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":483,"title":{},"body":{"controllers/ParkingController.html":{}}}],["badrequestexception(e.message",{"_index":554,"title":{},"body":{"controllers/ParkingController.html":{}}}],["baseurl",{"_index":76,"title":{},"body":{"injectables/AuthApi.html":{}}}],["bbox",{"_index":715,"title":{},"body":{"classes/Point.html":{}}}],["body",{"_index":199,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"controllers/ParkingController.html":{}}}],["boolean",{"_index":325,"title":{},"body":{"classes/GetReservedPlaceResp.html":{},"classes/ParkEdgesUtils.html":{},"entities/ReservedPlace.html":{},"guards/RoleGuard.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["bootstrap",{"_index":837,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":952,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":950,"title":{},"body":{"modules.html":{}}}],["building",{"_index":898,"title":{},"body":{"index.html":{}}}],["c2d29867",{"_index":211,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["canactivate",{"_index":761,"title":{},"body":{"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":765,"title":{},"body":{"guards/RoleGuard.html":{}}}],["cancel",{"_index":439,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["cancelreserve",{"_index":586,"title":{},"body":{"injectables/ParkingService.html":{}}}],["cancelreserve(reservedplaceid",{"_index":600,"title":{},"body":{"injectables/ParkingService.html":{}}}],["cancelreserveforuser",{"_index":427,"title":{},"body":{"controllers/ParkingController.html":{}}}],["cancelreserveforuser(userid",{"_index":435,"title":{},"body":{"controllers/ParkingController.html":{}}}],["case",{"_index":116,"title":{},"body":{"injectables/AuthApi.html":{},"controllers/ParkingController.html":{}}}],["catch",{"_index":484,"title":{},"body":{"controllers/ParkingController.html":{}}}],["catch(e",{"_index":119,"title":{},"body":{"injectables/AuthApi.html":{},"controllers/ParkingController.html":{}}}],["catchable",{"_index":558,"title":{},"body":{"controllers/ParkingController.html":{}}}],["ceate",{"_index":615,"title":{},"body":{"injectables/ParkingService.html":{}}}],["check",{"_index":628,"title":{},"body":{"injectables/ParkingService.html":{},"guards/RoleGuard.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["checkinenumfunc",{"_index":813,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["checktoken",{"_index":78,"title":{},"body":{"injectables/AuthApi.html":{}}}],["checktoken(req",{"_index":85,"title":{},"body":{"injectables/AuthApi.html":{}}}],["checktokenreq",{"_index":86,"title":{},"body":{"injectables/AuthApi.html":{},"miscellaneous/typealiases.html":{}}}],["checktokenresp",{"_index":100,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"miscellaneous/typealiases.html":{}}}],["checktokenresult",{"_index":97,"title":{},"body":{"injectables/AuthApi.html":{},"miscellaneous/typealiases.html":{}}}],["class",{"_index":60,"title":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"classes/ParkEdgesUtils.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":156,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"classes/ParkEdgesUtils.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authapimodule",{"_index":120,"title":{},"body":{"modules/AuthApiModule.html":{},"overview.html":{}}}],["cluster_authapimodule_exports",{"_index":121,"title":{},"body":{"modules/AuthApiModule.html":{},"overview.html":{}}}],["cluster_authapimodule_providers",{"_index":122,"title":{},"body":{"modules/AuthApiModule.html":{},"overview.html":{}}}],["cluster_parkingmodule",{"_index":572,"title":{},"body":{"modules/ParkingModule.html":{},"overview.html":{}}}],["cluster_parkingmodule_imports",{"_index":573,"title":{},"body":{"modules/ParkingModule.html":{}}}],["cluster_parkingmodule_providers",{"_index":574,"title":{},"body":{"modules/ParkingModule.html":{},"overview.html":{}}}],["column",{"_index":339,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["column({type",{"_index":341,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["common/api/auth.api.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/ParkingModule.html":{}}}],["common/decorators/roles.decorator",{"_index":498,"title":{},"body":{"controllers/ParkingController.html":{}}}],["common/decorators/user",{"_index":499,"title":{},"body":{"controllers/ParkingController.html":{}}}],["common/guards/role.guard",{"_index":502,"title":{},"body":{"controllers/ParkingController.html":{}}}],["common/middlewares/auth.middleware",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/ParkingModule.html":{}}}],["common/models/point",{"_index":189,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{}}}],["common/models/roles",{"_index":504,"title":{},"body":{"controllers/ParkingController.html":{}}}],["common/pipes/vallue",{"_index":509,"title":{},"body":{"controllers/ParkingController.html":{}}}],["common/pipes/value",{"_index":513,"title":{},"body":{"controllers/ParkingController.html":{}}}],["common/transformers/point.transformer",{"_index":410,"title":{},"body":{"entities/ParkPlace.html":{}}}],["configmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{}}}],["configmodule.forroot",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{}}}],["configservice.get(\"parking_auth_api_uri",{"_index":105,"title":{},"body":{"injectables/AuthApi.html":{}}}],["configservice.get(\"parking_database_uri",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":107,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["constructor(authapi",{"_index":129,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["constructor(getvalueorarray",{"_index":791,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["constructor(getvalues",{"_index":812,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["constructor(httpservice",{"_index":80,"title":{},"body":{"injectables/AuthApi.html":{}}}],["constructor(parkreposiotry",{"_index":593,"title":{},"body":{"injectables/ParkingService.html":{}}}],["constructor(reflector",{"_index":762,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(type",{"_index":695,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["consumer",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":769,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.getclass",{"_index":783,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":782,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":784,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":421,"title":{"controllers/ParkingController.html":{}},"body":{"controllers/ParkingController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('parking",{"_index":521,"title":{},"body":{"controllers/ParkingController.html":{}}}],["controllers",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{}}}],["coordinartes",{"_index":713,"title":{},"body":{"classes/Point.html":{}}}],["coordinates",{"_index":194,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{}}}],["coords",{"_index":160,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{}}}],["correcto",{"_index":718,"title":{},"body":{"classes/PointTransformer.html":{}}}],["coverage",{"_index":822,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cratedat",{"_index":285,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["create",{"_index":227,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["created",{"_index":246,"title":{},"body":{"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{}}}],["createdat",{"_index":232,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlacesInfo.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{}}}],["createforeignpark",{"_index":587,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createforeignpark(parkid",{"_index":604,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createforeignparkplace",{"_index":588,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createforeignparkplace(placeid",{"_index":608,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createparamdecorator",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpark",{"_index":428,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["createpark(req",{"_index":441,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["createparkplace",{"_index":589,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createparkplace(parkid",{"_index":611,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createparkplaceinfo",{"_index":590,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createparkplaceinfo(parkid",{"_index":613,"title":{},"body":{"injectables/ParkingService.html":{}}}],["createparkplacereq",{"_index":155,"title":{"classes/CreateParkPlaceReq.html":{}},"body":{"classes/CreateParkPlaceReq.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["createparkplacereq})@apiparam({name",{"_index":450,"title":{},"body":{"controllers/ParkingController.html":{}}}],["createparkreq",{"_index":197,"title":{"classes/CreateParkReq.html":{}},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"coverage.html":{}}}],["createparkreq})@apiresponse({type",{"_index":443,"title":{},"body":{"controllers/ParkingController.html":{}}}],["createparkresp",{"_index":229,"title":{"classes/CreateParkResp.html":{}},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["createplace",{"_index":429,"title":{},"body":{"controllers/ParkingController.html":{}}}],["createplace(req",{"_index":448,"title":{},"body":{"controllers/ParkingController.html":{}}}],["createreserveplacereq",{"_index":244,"title":{"classes/CreateReservePlaceReq.html":{}},"body":{"classes/CreateReservePlaceReq.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["createreserveplacereq})@apiresponse({type",{"_index":480,"title":{},"body":{"controllers/ParkingController.html":{}}}],["creates",{"_index":83,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["crypto",{"_index":185,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{}}}],["ctx",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d497",{"_index":213,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["data",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":233,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlacesInfo.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["date(date.now",{"_index":251,"title":{},"body":{"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{}}}],["decode",{"_index":891,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decodedrole",{"_index":785,"title":{},"body":{"guards/RoleGuard.html":{}}}],["decodedrole.includes(role",{"_index":788,"title":{},"body":{"guards/RoleGuard.html":{}}}],["decorator",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":165,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["decorators/roles.decorator",{"_index":773,"title":{},"body":{"guards/RoleGuard.html":{}}}],["default",{"_index":118,"title":{},"body":{"injectables/AuthApi.html":{},"entities/Park.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["delete",{"_index":485,"title":{},"body":{"controllers/ParkingController.html":{}}}],["delete('/place/reserved/cancel/me",{"_index":564,"title":{},"body":{"controllers/ParkingController.html":{}}}],["delete('/place/reserved/cancel/me')@apiresponse({status",{"_index":436,"title":{},"body":{"controllers/ParkingController.html":{}}}],["departure",{"_index":753,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["departuretime",{"_index":749,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":70,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":911,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":702,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["done",{"_index":322,"title":{},"body":{"classes/GetReservedPlaceResp.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{}}}],["double",{"_index":347,"title":{},"body":{"entities/Park.html":{}}}],["dto/create",{"_index":515,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["dto/get",{"_index":516,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["e",{"_index":559,"title":{},"body":{"controllers/ParkingController.html":{}}}],["e2e",{"_index":921,"title":{},"body":{"index.html":{}}}],["edge",{"_index":354,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["edges",{"_index":256,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"miscellaneous/enumerations.html":{}}}],["edges'})@apibearerauth",{"_index":471,"title":{},"body":{"controllers/ParkingController.html":{}}}],["edges'})@apiparam({name",{"_index":466,"title":{},"body":{"controllers/ParkingController.html":{}}}],["edges.model",{"_index":260,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["edges.model.ts",{"_index":373,"title":{},"body":{"classes/ParkEdgesUtils.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["edges.model.ts:27",{"_index":386,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["edges.model.ts:41",{"_index":383,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["edges.model.ts:53",{"_index":380,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["efficient",{"_index":899,"title":{},"body":{"index.html":{}}}],["entities",{"_index":336,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"overview.html":{}}}],["entity",{"_index":235,"title":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"coverage.html":{}}}],["entity/park",{"_index":577,"title":{},"body":{"modules/ParkingModule.html":{},"injectables/ParkingService.html":{}}}],["entity/park.entity",{"_index":578,"title":{},"body":{"modules/ParkingModule.html":{},"injectables/ParkingService.html":{}}}],["entity/reserved",{"_index":579,"title":{},"body":{"modules/ParkingModule.html":{},"injectables/ParkingService.html":{}}}],["entryoint",{"_index":890,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enum",{"_index":191,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"classes/ParkingServiceError.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/enumerations.html":{}}}],["enum.pipe",{"_index":514,"title":{},"body":{"controllers/ParkingController.html":{}}}],["enum.pipe.ts",{"_index":811,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{},"coverage.html":{}}}],["enum.pipe.ts:12",{"_index":816,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["enum.pipe.ts:36",{"_index":818,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["enum1",{"_index":882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":874,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":465,"title":{},"body":{"controllers/ParkingController.html":{}}}],["error",{"_index":692,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["errors",{"_index":880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":173,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{}}}],["executioncontext",{"_index":766,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["exports",{"_index":124,"title":{},"body":{"modules/AuthApiModule.html":{}}}],["express",{"_index":142,"title":{},"body":{"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":693,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["false",{"_index":278,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"guards/RoleGuard.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{}}}],["filtering",{"_index":622,"title":{},"body":{"injectables/ParkingService.html":{}}}],["filtervalues",{"_index":376,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["filtervalues(values",{"_index":379,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["findoneoptions",{"_index":632,"title":{},"body":{"injectables/ParkingService.html":{}}}],["firstvaluefrom",{"_index":94,"title":{},"body":{"injectables/AuthApi.html":{}}}],["firstvaluefrom(resp",{"_index":113,"title":{},"body":{"injectables/AuthApi.html":{}}}],["floor",{"_index":161,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{}}}],["for(const",{"_index":387,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["forbiddenexception",{"_index":486,"title":{},"body":{"controllers/ParkingController.html":{}}}],["forbiddenexception(parkingserviceerrortype.reservedplacenotfound",{"_index":571,"title":{},"body":{"controllers/ParkingController.html":{}}}],["fordisabled",{"_index":884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["foreign",{"_index":606,"title":{},"body":{"injectables/ParkingService.html":{}}}],["format",{"_index":719,"title":{},"body":{"classes/PointTransformer.html":{}}}],["forroutes(parkingcontroller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":548,"title":{},"body":{"controllers/ParkingController.html":{},"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["framework",{"_index":897,"title":{},"body":{"index.html":{}}}],["free",{"_index":288,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["freespaces",{"_index":282,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["from(value",{"_index":721,"title":{},"body":{"classes/PointTransformer.html":{}}}],["fucntion",{"_index":803,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["function",{"_index":798,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":887,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["geojson",{"_index":188,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{}}}],["geometry",{"_index":186,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{}}}],["get('/:id",{"_index":529,"title":{},"body":{"controllers/ParkingController.html":{}}}],["get('/:id')@apiresponse({type",{"_index":462,"title":{},"body":{"controllers/ParkingController.html":{}}}],["get('/:id/parkplacesinfo/last",{"_index":539,"title":{},"body":{"controllers/ParkingController.html":{}}}],["get('/:id/parkplacesinfo/last')@apiresponse({type",{"_index":455,"title":{},"body":{"controllers/ParkingController.html":{}}}],["get('/place/reserved/me",{"_index":560,"title":{},"body":{"controllers/ParkingController.html":{}}}],["get('/place/reserved/me')@apiresponse({type",{"_index":474,"title":{},"body":{"controllers/ParkingController.html":{}}}],["get()@apiresponse({type",{"_index":469,"title":{},"body":{"controllers/ParkingController.html":{}}}],["getlastparkplacesinfo",{"_index":430,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["getlastparkplacesinfo(id",{"_index":454,"title":{},"body":{"controllers/ParkingController.html":{}}}],["getlastparkplacesinfo(parkid",{"_index":617,"title":{},"body":{"injectables/ParkingService.html":{}}}],["getname",{"_index":697,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["getpark",{"_index":431,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["getpark(id",{"_index":461,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["getparkparams",{"_index":252,"title":{"classes/GetParkParams.html":{}},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"coverage.html":{}}}],["getparkplace",{"_index":294,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["getparkplaceinfo",{"_index":281,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["getparkplaceinforesp",{"_index":266,"title":{"classes/GetParkPlaceInfoResp.html":{}},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["getparkplaceresp",{"_index":268,"title":{"classes/GetParkPlaceResp.html":{}},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["getparkresp",{"_index":271,"title":{"classes/GetParkResp.html":{}},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["getparkresp})@apiquery({enum",{"_index":463,"title":{},"body":{"controllers/ParkingController.html":{}}}],["getparks",{"_index":432,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["getparks(params",{"_index":620,"title":{},"body":{"injectables/ParkingService.html":{}}}],["getparks(query",{"_index":468,"title":{},"body":{"controllers/ParkingController.html":{}}}],["getparksparams",{"_index":312,"title":{"classes/GetParksParams.html":{}},"body":{"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"coverage.html":{}}}],["getparksresp",{"_index":317,"title":{"classes/GetParksResp.html":{}},"body":{"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["getplace",{"_index":591,"title":{},"body":{"injectables/ParkingService.html":{}}}],["getplace(placeid",{"_index":623,"title":{},"body":{"injectables/ParkingService.html":{}}}],["getreservedplaceforuser",{"_index":433,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["getreservedplaceforuser(userid",{"_index":473,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["getreservedplaceresp",{"_index":320,"title":{"classes/GetReservedPlaceResp.html":{}},"body":{"classes/GetReservedPlaceResp.html":{},"controllers/ParkingController.html":{},"coverage.html":{}}}],["getter",{"_index":699,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["getting",{"_index":893,"title":{"index.html":{}},"body":{}}],["getvalueorarray",{"_index":797,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["getvalues",{"_index":817,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["goneexception",{"_index":630,"title":{},"body":{"injectables/ParkingService.html":{}}}],["grow",{"_index":928,"title":{},"body":{"index.html":{}}}],["guard",{"_index":757,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["guards",{"_index":758,"title":{},"body":{"guards/RoleGuard.html":{}}}],["here",{"_index":939,"title":{},"body":{"index.html":{}}}],["http",{"_index":425,"title":{},"body":{"controllers/ParkingController.html":{}}}],["httpexception",{"_index":139,"title":{},"body":{"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{}}}],["httpmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{}}}],["https://nestjs.com",{"_index":946,"title":{},"body":{"index.html":{}}}],["httpservice",{"_index":81,"title":{},"body":{"injectables/AuthApi.html":{}}}],["httpstatus",{"_index":93,"title":{},"body":{"injectables/AuthApi.html":{}}}],["httpstatus.ok",{"_index":117,"title":{},"body":{"injectables/AuthApi.html":{}}}],["id",{"_index":230,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["id.decorator",{"_index":500,"title":{},"body":{"controllers/ParkingController.html":{}}}],["id.decorator.ts",{"_index":832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["if(!authheader",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if(!lastparkplaceinfo",{"_index":542,"title":{},"body":{"controllers/ParkingController.html":{}}}],["if(!place",{"_index":661,"title":{},"body":{"injectables/ParkingService.html":{}}}],["if(!reservedplace",{"_index":562,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["if(!resrvedplace",{"_index":681,"title":{},"body":{"injectables/ParkingService.html":{}}}],["if(!token",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["if((await",{"_index":667,"title":{},"body":{"injectables/ParkingService.html":{}}}],["if(array.isarray(valueorarray",{"_index":808,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["if(authheader",{"_index":146,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["if(e",{"_index":545,"title":{},"body":{"controllers/ParkingController.html":{}}}],["if(reservedforuser",{"_index":665,"title":{},"body":{"injectables/ParkingService.html":{}}}],["if(token",{"_index":152,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["implementation",{"_index":71,"title":{},"body":{"injectables/AuthApi.html":{}}}],["implementetion",{"_index":585,"title":{},"body":{"injectables/ParkingService.html":{}}}],["implements",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthMiddleware.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["import",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["imports",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{}}}],["index",{"_index":72,"title":{"index.html":{}},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["info.dto",{"_index":267,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{}}}],["info.dto.ts",{"_index":280,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{},"coverage.html":{}}}],["info.dto.ts:19",{"_index":290,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["info.dto.ts:28",{"_index":287,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["info.dto.ts:37",{"_index":292,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["info.dto.ts:46",{"_index":284,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["info.entity",{"_index":366,"title":{},"body":{"entities/Park.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{}}}],["info.entity.ts",{"_index":411,"title":{},"body":{"entities/ParkPlacesInfo.html":{},"entities/ReservedPlaceInfo.html":{},"coverage.html":{}}}],["info.entity.ts:19",{"_index":754,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["info.entity.ts:21",{"_index":416,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["info.entity.ts:28",{"_index":750,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["info.entity.ts:30",{"_index":414,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["info.entity.ts:37",{"_index":752,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["info.entity.ts:39",{"_index":417,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["info.entity.ts:46",{"_index":756,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["info.entity.ts:48",{"_index":413,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["info.entity.ts:57",{"_index":419,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["info.model",{"_index":264,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkResp.html":{},"entities/ParkPlacesInfo.html":{}}}],["info.model.ts",{"_index":965,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info.park",{"_index":648,"title":{},"body":{"injectables/ParkingService.html":{}}}],["info.reservedplace",{"_index":740,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["infos",{"_index":460,"title":{},"body":{"controllers/ParkingController.html":{}}}],["ingo",{"_index":291,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["inject",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":66,"title":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"injectables/ParkingService.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"injectables/ParkingService.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":68,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"injectables/ParkingService.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"overview.html":{}}}],["injectrepository",{"_index":631,"title":{},"body":{"injectables/ParkingService.html":{}}}],["injectrepository(park",{"_index":633,"title":{},"body":{"injectables/ParkingService.html":{}}}],["injectrepository(parkplace",{"_index":635,"title":{},"body":{"injectables/ParkingService.html":{}}}],["injectrepository(parkplacesinfo",{"_index":634,"title":{},"body":{"injectables/ParkingService.html":{}}}],["injectrepository(reservedplace",{"_index":636,"title":{},"body":{"injectables/ParkingService.html":{}}}],["installation",{"_index":907,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":909,"title":{},"body":{"index.html":{}}}],["instance",{"_index":84,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["instanceof",{"_index":546,"title":{},"body":{"controllers/ParkingController.html":{}}}],["invalid",{"_index":99,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"miscellaneous/typealiases.html":{}}}],["isarray",{"_index":464,"title":{},"body":{"controllers/ParkingController.html":{}}}],["isdatestring",{"_index":250,"title":{},"body":{"classes/CreateReservePlaceReq.html":{}}}],["isenum",{"_index":180,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["isenum(placetype",{"_index":193,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["isglobal",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":221,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["islatitude",{"_index":222,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["islongitude",{"_index":223,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["isnumber",{"_index":181,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["isstring",{"_index":224,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["isuuid",{"_index":182,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{}}}],["items",{"_index":318,"title":{},"body":{"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{}}}],["join",{"_index":935,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":362,"title":{},"body":{"entities/Park.html":{}}}],["jwt",{"_index":777,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["jwtmodule",{"_index":581,"title":{},"body":{"modules/ParkingModule.html":{}}}],["jwtservice",{"_index":779,"title":{},"body":{"guards/RoleGuard.html":{}}}],["kamil",{"_index":943,"title":{},"body":{"index.html":{}}}],["key",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":459,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["lastinfo",{"_index":673,"title":{},"body":{"injectables/ParkingService.html":{}}}],["lastinfo.freespaces",{"_index":677,"title":{},"body":{"injectables/ParkingService.html":{}}}],["lastinfo.occupiedspaces",{"_index":678,"title":{},"body":{"injectables/ParkingService.html":{}}}],["lastparkplaceinfo",{"_index":540,"title":{},"body":{"controllers/ParkingController.html":{}}}],["latitude",{"_index":201,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["license",{"_index":949,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":925,"title":{},"body":{"index.html":{}}}],["list",{"_index":616,"title":{},"body":{"injectables/ParkingService.html":{}}}],["literal",{"_index":601,"title":{},"body":{"injectables/ParkingService.html":{},"miscellaneous/typealiases.html":{}}}],["longitude",{"_index":202,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["longitutde",{"_index":231,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"entities/Park.html":{}}}],["manytoone",{"_index":406,"title":{},"body":{"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{}}}],["manytoone(undefined",{"_index":399,"title":{},"body":{"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{}}}],["matching",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["memberof",{"_index":102,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["merged",{"_index":637,"title":{},"body":{"injectables/ParkingService.html":{}}}],["metadata",{"_index":800,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":88,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["methods",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["middleware",{"_index":138,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["middlewareconsumer",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":873,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":924,"title":{},"body":{"index.html":{}}}],["mode",{"_index":914,"title":{},"body":{"index.html":{}}}],["models/park",{"_index":259,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["models/park.model",{"_index":265,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["models/place",{"_index":190,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{}}}],["models/reserver",{"_index":335,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["models/roles",{"_index":774,"title":{},"body":{"guards/RoleGuard.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":415,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["more",{"_index":938,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":944,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":904,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":948,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":771,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":582,"title":{},"body":{"modules/ParkingModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":179,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"controllers/ParkingController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":140,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["nestmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":149,"title":{},"body":{"injectables/AuthMiddleware.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/ParkPlace.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"coverage.html":{}}}],["newvalues",{"_index":535,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["next",{"_index":135,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["nextfunction",{"_index":136,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["node.js",{"_index":896,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":487,"title":{},"body":{"controllers/ParkingController.html":{}}}],["notfoundexception(\"park",{"_index":547,"title":{},"body":{"controllers/ParkingController.html":{}}}],["notfoundexception(e.message",{"_index":556,"title":{},"body":{"controllers/ParkingController.html":{}}}],["notfoundexception(parkingserviceerrortype.reservedplacenotfound",{"_index":569,"title":{},"body":{"controllers/ParkingController.html":{}}}],["notfoundexception(parkingserviceerrortype.userdonthavereservedplace",{"_index":563,"title":{},"body":{"controllers/ParkingController.html":{}}}],["now",{"_index":343,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{}}}],["npm",{"_index":908,"title":{},"body":{"index.html":{}}}],["null",{"_index":892,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nullable",{"_index":276,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["number",{"_index":169,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["number})@apibearerauth",{"_index":457,"title":{},"body":{"controllers/ParkingController.html":{}}}],["number})@apibearerauth()@apiresponse({type",{"_index":451,"title":{},"body":{"controllers/ParkingController.html":{}}}],["number})@apibody({type",{"_index":479,"title":{},"body":{"controllers/ParkingController.html":{}}}],["observable",{"_index":770,"title":{},"body":{"guards/RoleGuard.html":{}}}],["occupied",{"_index":293,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["occupiedspaces",{"_index":283,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["ok",{"_index":98,"title":{},"body":{"injectables/AuthApi.html":{},"miscellaneous/typealiases.html":{}}}],["onetomany",{"_index":363,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{}}}],["onetomany(undefined",{"_index":351,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{}}}],["onetoone",{"_index":747,"title":{},"body":{"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["onetoone(undefined",{"_index":739,"title":{},"body":{"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["onupdate",{"_index":360,"title":{},"body":{"entities/Park.html":{}}}],["open",{"_index":926,"title":{},"body":{"index.html":{}}}],["optional",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":656,"title":{},"body":{"injectables/ParkingService.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"overview.html":{}}}],["overview",{"_index":953,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":847,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["palce",{"_index":298,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["param",{"_index":103,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["param('id",{"_index":532,"title":{},"body":{"controllers/ParkingController.html":{}}}],["param('placeid",{"_index":550,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parameters",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":255,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"injectables/ParkingService.html":{}}}],["params.edges",{"_index":643,"title":{},"body":{"injectables/ParkingService.html":{}}}],["park",{"_index":158,"title":{"entities/Park.html":{}},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["park.dto",{"_index":315,"title":{},"body":{"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["park.dto.ts",{"_index":198,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"coverage.html":{}}}],["park.dto.ts:101",{"_index":302,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:102",{"_index":239,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:111",{"_index":236,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:112",{"_index":311,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:120",{"_index":242,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:127",{"_index":308,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:129",{"_index":237,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:138",{"_index":243,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:142",{"_index":307,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:19",{"_index":210,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["park.dto.ts:23",{"_index":257,"title":{},"body":{"classes/GetParkParams.html":{}}}],["park.dto.ts:29",{"_index":208,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["park.dto.ts:39",{"_index":206,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["park.dto.ts:41",{"_index":303,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:49",{"_index":218,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["park.dto.ts:54",{"_index":309,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:58",{"_index":216,"title":{},"body":{"classes/CreateParkReq.html":{}}}],["park.dto.ts:63",{"_index":305,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:72",{"_index":304,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:75",{"_index":238,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:81",{"_index":301,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:84",{"_index":241,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.dto.ts:90",{"_index":310,"title":{},"body":{"classes/GetParkResp.html":{}}}],["park.dto.ts:93",{"_index":240,"title":{},"body":{"classes/CreateParkResp.html":{}}}],["park.entity",{"_index":407,"title":{},"body":{"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{}}}],["park.parkplaces",{"_index":400,"title":{},"body":{"entities/ParkPlace.html":{}}}],["park.parkplacesinfo",{"_index":418,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["park.totalplaces",{"_index":527,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkedges",{"_index":258,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"miscellaneous/enumerations.html":{}}}],["parkedgesutils",{"_index":371,"title":{"classes/ParkEdgesUtils.html":{}},"body":{"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"coverage.html":{}}}],["parkedgesutils.valuein(value",{"_index":534,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkid",{"_index":607,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parking",{"_index":424,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["parking.controller",{"_index":576,"title":{},"body":{"modules/ParkingModule.html":{}}}],["parking.service",{"_index":519,"title":{},"body":{"controllers/ParkingController.html":{},"modules/ParkingModule.html":{}}}],["parking.service.errors",{"_index":507,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["parking/parking.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["parking/parking.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["parkingcontroller",{"_index":39,"title":{"controllers/ParkingController.html":{}},"body":{"modules/AppModule.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"coverage.html":{}}}],["parkingmodule",{"_index":8,"title":{"modules/ParkingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ParkingModule.html":{},"modules.html":{},"overview.html":{}}}],["parkingservice",{"_index":518,"title":{"injectables/ParkingService.html":{}},"body":{"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"coverage.html":{},"overview.html":{}}}],["parkingserviceerror",{"_index":505,"title":{"classes/ParkingServiceError.html":{}},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"coverage.html":{}}}],["parkingserviceerror(parkingserviceerrortype.placeisreserved",{"_index":669,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkingserviceerror(parkingserviceerrortype.placenotfound",{"_index":662,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkingserviceerror(parkingserviceerrortype.reservedplacenotfound",{"_index":682,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkingserviceerror(parkingserviceerrortype.useralreadyreserveplace",{"_index":666,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkingserviceerror(parkingserviceerrortype.younotreservethisplace",{"_index":685,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkingserviceerrortype",{"_index":506,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["parkingserviceerrortype.placeisreserved",{"_index":553,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkingserviceerrortype.placenotfound",{"_index":555,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkingserviceerrortype.reservedplacenotfound",{"_index":568,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkingserviceerrortype.useralreadyreserveplace",{"_index":557,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkingserviceerrortype.younotreservethisplace",{"_index":570,"title":{},"body":{"controllers/ParkingController.html":{}}}],["parkplace",{"_index":261,"title":{"entities/ParkPlace.html":{}},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["parkplace.park",{"_index":370,"title":{},"body":{"entities/Park.html":{},"injectables/ParkingService.html":{}}}],["parkplace.park)@joincolumn",{"_index":352,"title":{},"body":{"entities/Park.html":{}}}],["parkplace.reservedplaces",{"_index":737,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["parkplaceinfo",{"_index":412,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["parkplaceinfotype",{"_index":420,"title":{},"body":{"entities/ParkPlacesInfo.html":{}}}],["parkplacereposiotry",{"_index":596,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkplaces",{"_index":279,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"miscellaneous/enumerations.html":{}}}],["parkplacesinfo",{"_index":263,"title":{"entities/ParkPlacesInfo.html":{}},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlacesInfo.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["parkplacesinfo.park",{"_index":369,"title":{},"body":{"entities/Park.html":{}}}],["parkplacesinfo.park)@joincolumn",{"_index":355,"title":{},"body":{"entities/Park.html":{}}}],["parkplacesinforeposiotry",{"_index":595,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parkplacetype",{"_index":408,"title":{},"body":{"entities/ParkPlace.html":{}}}],["parkreposiotry",{"_index":599,"title":{},"body":{"injectables/ParkingService.html":{}}}],["parks",{"_index":316,"title":{},"body":{"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"miscellaneous/enumerations.html":{}}}],["parks.dto",{"_index":517,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["parks.dto.ts",{"_index":313,"title":{},"body":{"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"coverage.html":{}}}],["parks.dto.ts:17",{"_index":314,"title":{},"body":{"classes/GetParksParams.html":{}}}],["parks.dto.ts:38",{"_index":319,"title":{},"body":{"classes/GetParksResp.html":{}}}],["parktype",{"_index":368,"title":{},"body":{"entities/Park.html":{}}}],["parkuuid",{"_index":203,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["parsejwt",{"_index":775,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["parsejwt(token",{"_index":786,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":778,"title":{},"body":{"guards/RoleGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["payload.ts",{"_index":835,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["pg",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["pipetransform",{"_index":804,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["place",{"_index":168,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["place.dto",{"_index":269,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{}}}],["place.dto.ts",{"_index":159,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetReservedPlaceResp.html":{},"coverage.html":{}}}],["place.dto.ts:19",{"_index":329,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.dto.ts:23",{"_index":171,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkPlaceResp.html":{}}}],["place.dto.ts:28",{"_index":333,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.dto.ts:32",{"_index":297,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["place.dto.ts:37",{"_index":177,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateReservePlaceReq.html":{}}}],["place.dto.ts:41",{"_index":328,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.dto.ts:45",{"_index":300,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["place.dto.ts:52",{"_index":175,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["place.dto.ts:54",{"_index":330,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.dto.ts:58",{"_index":299,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["place.dto.ts:67",{"_index":326,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.dto.ts:68",{"_index":167,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["place.dto.ts:74",{"_index":296,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["place.dto.ts:80",{"_index":324,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.dto.ts:93",{"_index":331,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["place.entity",{"_index":367,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["place.entity.ts",{"_index":392,"title":{},"body":{"entities/ParkPlace.html":{},"entities/ReservedPlace.html":{},"coverage.html":{}}}],["place.entity.ts:20",{"_index":736,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:26",{"_index":398,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:29",{"_index":745,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:35",{"_index":397,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:38",{"_index":738,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:44",{"_index":403,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:47",{"_index":735,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:56",{"_index":742,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:58",{"_index":402,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:65",{"_index":734,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:72",{"_index":396,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:74",{"_index":733,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:81",{"_index":401,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:83",{"_index":744,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.entity.ts:90",{"_index":405,"title":{},"body":{"entities/ParkPlace.html":{}}}],["place.entity.ts:92",{"_index":741,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["place.model",{"_index":262,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/ParkPlace.html":{}}}],["place.model.ts",{"_index":964,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["place.park",{"_index":653,"title":{},"body":{"injectables/ParkingService.html":{}}}],["place.park.id",{"_index":676,"title":{},"body":{"injectables/ParkingService.html":{}}}],["place.reservedplaceinfo",{"_index":755,"title":{},"body":{"entities/ReservedPlaceInfo.html":{}}}],["placeid",{"_index":478,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["placeisreserved",{"_index":592,"title":{},"body":{"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["placeisreserved(placeid",{"_index":626,"title":{},"body":{"injectables/ParkingService.html":{}}}],["placenotfound",{"_index":700,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["places",{"_index":220,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkResp.html":{},"entities/ParkPlacesInfo.html":{},"miscellaneous/typealiases.html":{}}}],["placetype",{"_index":162,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{},"miscellaneous/enumerations.html":{}}}],["placetype.standart",{"_index":192,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{}}}],["placeuuid",{"_index":163,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{}}}],["please",{"_index":936,"title":{},"body":{"index.html":{}}}],["point",{"_index":164,"title":{"classes/Point.html":{}},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"coverage.html":{}}}],["pointtransformer",{"_index":409,"title":{"classes/PointTransformer.html":{}},"body":{"entities/ParkPlace.html":{},"classes/PointTransformer.html":{},"coverage.html":{}}}],["pointtype",{"_index":711,"title":{},"body":{"classes/Point.html":{}}}],["position",{"_index":187,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/Point.html":{}}}],["post",{"_index":488,"title":{},"body":{"controllers/ParkingController.html":{}}}],["post('/:id/place",{"_index":543,"title":{},"body":{"controllers/ParkingController.html":{}}}],["post('/:id/place')@apibody({type",{"_index":449,"title":{},"body":{"controllers/ParkingController.html":{}}}],["post('place/:placeid",{"_index":549,"title":{},"body":{"controllers/ParkingController.html":{}}}],["post('place/:placeid')@apiparam({name",{"_index":477,"title":{},"body":{"controllers/ParkingController.html":{}}}],["post()@apibody({type",{"_index":442,"title":{},"body":{"controllers/ParkingController.html":{}}}],["postgres",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/PointTransformer.html":{}}}],["postgress",{"_index":724,"title":{},"body":{"classes/PointTransformer.html":{}}}],["postress",{"_index":727,"title":{},"body":{"classes/PointTransformer.html":{}}}],["precision",{"_index":348,"title":{},"body":{"entities/Park.html":{}}}],["prefix",{"_index":423,"title":{},"body":{"controllers/ParkingController.html":{}}}],["primarygeneratedcolumn",{"_index":345,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["private",{"_index":74,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["process",{"_index":327,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["production",{"_index":916,"title":{},"body":{"index.html":{}}}],["programm",{"_index":723,"title":{},"body":{"classes/PointTransformer.html":{},"miscellaneous/functions.html":{}}}],["progressive",{"_index":895,"title":{},"body":{"index.html":{}}}],["project",{"_index":927,"title":{},"body":{"index.html":{}}}],["promise",{"_index":90,"title":{},"body":{"injectables/AuthApi.html":{},"guards/RoleGuard.html":{}}}],["properties",{"_index":73,"title":{"properties.html":{}},"body":{"injectables/AuthApi.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"properties.html":{}}}],["providers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{}}}],["query",{"_index":254,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{}}}],["queryfailederror",{"_index":496,"title":{},"body":{"controllers/ParkingController.html":{}}}],["querytype",{"_index":792,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["querytype,array",{"_index":794,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["querytype,newvalues",{"_index":815,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["randomuuid",{"_index":184,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{}}}],["read",{"_index":937,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":75,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["record",{"_index":286,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["reflect",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":763,"title":{},"body":{"guards/RoleGuard.html":{}}}],["relation",{"_index":364,"title":{},"body":{"entities/Park.html":{}}}],["relations",{"_index":642,"title":{},"body":{"injectables/ParkingService.html":{}}}],["repesantation",{"_index":338,"title":{},"body":{"entities/Park.html":{}}}],["repository",{"_index":594,"title":{},"body":{"injectables/ParkingService.html":{},"index.html":{}}}],["represantation",{"_index":393,"title":{},"body":{"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{}}}],["representation",{"_index":732,"title":{},"body":{"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["req",{"_index":89,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateReservePlaceReq.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["req.headers.authorization",{"_index":145,"title":{},"body":{"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user_id",{"_index":684,"title":{},"body":{"injectables/ParkingService.html":{}}}],["request",{"_index":132,"title":{},"body":{"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{}}}],["requests",{"_index":426,"title":{},"body":{"controllers/ParkingController.html":{}}}],["required",{"_index":277,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"controllers/ParkingController.html":{}}}],["requiredroles",{"_index":780,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requiredroles.some((role",{"_index":787,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":133,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["reserv",{"_index":746,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["reserve",{"_index":245,"title":{},"body":{"classes/CreateReservePlaceReq.html":{},"classes/GetReservedPlaceResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"entities/ReservedPlace.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["reserved",{"_index":247,"title":{},"body":{"classes/CreateReservePlaceReq.html":{},"classes/GetReservedPlaceResp.html":{},"entities/ParkPlace.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"miscellaneous/enumerations.html":{}}}],["reservedforuser",{"_index":663,"title":{},"body":{"injectables/ParkingService.html":{}}}],["reservedplace",{"_index":321,"title":{"entities/ReservedPlace.html":{}},"body":{"classes/GetReservedPlaceResp.html":{},"entities/ParkPlace.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["reservedplace.done",{"_index":658,"title":{},"body":{"injectables/ParkingService.html":{}}}],["reservedplace.parkplace",{"_index":404,"title":{},"body":{"entities/ParkPlace.html":{}}}],["reservedplaceid",{"_index":603,"title":{},"body":{"injectables/ParkingService.html":{}}}],["reservedplaceinfo",{"_index":580,"title":{"entities/ReservedPlaceInfo.html":{}},"body":{"modules/ParkingModule.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["reservedplacenotfound",{"_index":706,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["reservedplacereposiotry",{"_index":597,"title":{},"body":{"injectables/ParkingService.html":{}}}],["reservedplaces",{"_index":394,"title":{},"body":{"entities/ParkPlace.html":{}}}],["reserveplace",{"_index":434,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["reserveplace(placeid",{"_index":476,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["reserveplace.parkplace",{"_index":672,"title":{},"body":{"injectables/ParkingService.html":{}}}],["reserveplacenotfound",{"_index":707,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"overview.html":{}}}],["resp",{"_index":108,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{}}}],["resp.result",{"_index":154,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["respnce",{"_index":295,"title":{},"body":{"classes/GetParkPlaceResp.html":{}}}],["respocne",{"_index":228,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkPlaceInfoResp.html":{}}}],["responce",{"_index":270,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{}}}],["response",{"_index":134,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["resreve",{"_index":482,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["resreved",{"_index":249,"title":{},"body":{"classes/CreateReservePlaceReq.html":{}}}],["resrvedplace",{"_index":680,"title":{},"body":{"injectables/ParkingService.html":{}}}],["resrvedplace.done",{"_index":688,"title":{},"body":{"injectables/ParkingService.html":{}}}],["resrvedplace.parkplace.park.id",{"_index":687,"title":{},"body":{"injectables/ParkingService.html":{}}}],["resrvedplace.user_id",{"_index":683,"title":{},"body":{"injectables/ParkingService.html":{}}}],["result",{"_index":101,"title":{},"body":{"injectables/AuthApi.html":{}}}],["result.status",{"_index":115,"title":{},"body":{"injectables/AuthApi.html":{}}}],["results",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":106,"title":{},"body":{"injectables/AuthApi.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":503,"title":{},"body":{"controllers/ParkingController.html":{},"guards/RoleGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roleguard",{"_index":501,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/ParkingController.html":{},"guards/RoleGuard.html":{},"coverage.html":{}}}],["roles",{"_index":497,"title":{},"body":{"controllers/ParkingController.html":{},"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles_key",{"_index":772,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":760,"title":{},"body":{"guards/RoleGuard.html":{},"index.html":{}}}],["rxjs",{"_index":95,"title":{},"body":{"injectables/AuthApi.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["scalable",{"_index":900,"title":{},"body":{"index.html":{}}}],["server",{"_index":901,"title":{},"body":{"index.html":{}}}],["servic",{"_index":691,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["service",{"_index":522,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["setmetadata(roles_key",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setvalue",{"_index":793,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["setvalues",{"_index":814,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["side",{"_index":902,"title":{},"body":{"index.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"modules/AuthApiModule.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"modules/ParkingModule.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"index.html":{}}}],["spaces",{"_index":289,"title":{},"body":{"classes/GetParkPlaceInfoResp.html":{}}}],["sponsors",{"_index":930,"title":{},"body":{"index.html":{}}}],["src/.../auth.api.ts",{"_index":962,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../get",{"_index":889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":888,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../park",{"_index":875,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../park.model.ts",{"_index":963,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../parking.service.errors.ts",{"_index":876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../place",{"_index":877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../reserved",{"_index":967,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../reserver",{"_index":966,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../roles.decorator.ts",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.ts",{"_index":879,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":15,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:39",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/api/auth.api.module.ts",{"_index":123,"title":{},"body":{"modules/AuthApiModule.html":{}}}],["src/common/api/auth.api.ts",{"_index":69,"title":{},"body":{"injectables/AuthApi.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/api/auth.api.ts:32",{"_index":82,"title":{},"body":{"injectables/AuthApi.html":{}}}],["src/common/api/auth.api.ts:54",{"_index":87,"title":{},"body":{"injectables/AuthApi.html":{}}}],["src/common/decorators/roles.decorator.ts",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/user",{"_index":831,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/guards/role.guard.ts",{"_index":759,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:19",{"_index":764,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:37",{"_index":767,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/middlewares/auth.middleware.ts",{"_index":126,"title":{},"body":{"injectables/AuthMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/auth.middleware.ts:14",{"_index":130,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/common/middlewares/auth.middleware.ts:34",{"_index":137,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["src/common/models/point.ts",{"_index":710,"title":{},"body":{"classes/Point.html":{},"coverage.html":{}}}],["src/common/models/point.ts:17",{"_index":714,"title":{},"body":{"classes/Point.html":{}}}],["src/common/models/point.ts:25",{"_index":712,"title":{},"body":{"classes/Point.html":{}}}],["src/common/models/roles.ts",{"_index":885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/pipes/vallue",{"_index":789,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"coverage.html":{}}}],["src/common/pipes/value",{"_index":810,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{},"coverage.html":{}}}],["src/common/transformers/point.transformer.ts",{"_index":716,"title":{},"body":{"classes/PointTransformer.html":{},"coverage.html":{}}}],["src/common/transformers/point.transformer.ts:19",{"_index":726,"title":{},"body":{"classes/PointTransformer.html":{}}}],["src/common/transformers/point.transformer.ts:31",{"_index":722,"title":{},"body":{"classes/PointTransformer.html":{}}}],["src/common/utils/get",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/main.ts",{"_index":836,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/parking/dto/create",{"_index":157,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"coverage.html":{}}}],["src/parking/dto/get",{"_index":253,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"coverage.html":{}}}],["src/parking/entity/park",{"_index":391,"title":{},"body":{"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"coverage.html":{}}}],["src/parking/entity/park.entity.ts",{"_index":337,"title":{},"body":{"entities/Park.html":{},"coverage.html":{}}}],["src/parking/entity/park.entity.ts:105",{"_index":353,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:22",{"_index":346,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:31",{"_index":357,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:40",{"_index":350,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:49",{"_index":349,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:58",{"_index":340,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:67",{"_index":358,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:76",{"_index":344,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:85",{"_index":361,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/park.entity.ts:95",{"_index":356,"title":{},"body":{"entities/Park.html":{}}}],["src/parking/entity/reserved",{"_index":731,"title":{},"body":{"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"coverage.html":{}}}],["src/parking/models/park",{"_index":372,"title":{},"body":{"classes/ParkEdgesUtils.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/parking/models/park.model.ts",{"_index":968,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/parking/models/place",{"_index":881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/parking/models/reserved",{"_index":970,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/parking/models/reserver",{"_index":969,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/parking/parking.controller.ts",{"_index":422,"title":{},"body":{"controllers/ParkingController.html":{},"coverage.html":{}}}],["src/parking/parking.controller.ts:107",{"_index":472,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:137",{"_index":458,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:160",{"_index":453,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:189",{"_index":481,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:223",{"_index":475,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:242",{"_index":438,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:52",{"_index":446,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.controller.ts:76",{"_index":467,"title":{},"body":{"controllers/ParkingController.html":{}}}],["src/parking/parking.module.ts",{"_index":575,"title":{},"body":{"modules/ParkingModule.html":{}}}],["src/parking/parking.service.errors.ts",{"_index":690,"title":{},"body":{"classes/ParkingServiceError.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/parking/parking.service.errors.ts:30",{"_index":696,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["src/parking/parking.service.errors.ts:49",{"_index":698,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["src/parking/parking.service.ts",{"_index":584,"title":{},"body":{"injectables/ParkingService.html":{},"coverage.html":{}}}],["src/parking/parking.service.ts:111",{"_index":618,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:136",{"_index":614,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:166",{"_index":612,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:193",{"_index":605,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:210",{"_index":609,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:228",{"_index":627,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:23",{"_index":598,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:258",{"_index":624,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:283",{"_index":629,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:333",{"_index":602,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:375",{"_index":625,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:54",{"_index":610,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:75",{"_index":619,"title":{},"body":{"injectables/ParkingService.html":{}}}],["src/parking/parking.service.ts:94",{"_index":621,"title":{},"body":{"injectables/ParkingService.html":{}}}],["standart",{"_index":883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":912,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":915,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":917,"title":{},"body":{"index.html":{}}}],["started",{"_index":894,"title":{"index.html":{}},"body":{}}],["starter",{"_index":906,"title":{},"body":{"index.html":{}}}],["statements",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":375,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["status",{"_index":444,"title":{},"body":{"controllers/ParkingController.html":{}}}],["stay",{"_index":940,"title":{},"body":{"index.html":{}}}],["stop",{"_index":743,"title":{},"body":{"entities/ReservedPlace.html":{}}}],["string",{"_index":91,"title":{},"body":{"injectables/AuthApi.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/PointTransformer.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["super(type",{"_index":708,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["support",{"_index":931,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":951,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["switch",{"_index":114,"title":{},"body":{"injectables/AuthApi.html":{}}}],["switch(e.type",{"_index":552,"title":{},"body":{"controllers/ParkingController.html":{}}}],["synchronize",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":845,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":805,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["test",{"_index":920,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":923,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":922,"title":{},"body":{"index.html":{}}}],["tests",{"_index":919,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":929,"title":{},"body":{"index.html":{}}}],["this.authapi.checktoken({token",{"_index":153,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["this.baseurl",{"_index":104,"title":{},"body":{"injectables/AuthApi.html":{}}}],["this.checkinenumfunc(value",{"_index":821,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["this.createforeignpark(parkid",{"_index":649,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.createparkplaceinfo",{"_index":675,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.getlastparkplacesinfo(place.park.id",{"_index":674,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.getlastparkplacesinfo(resrvedplace.parkplace.park.id",{"_index":686,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.getplace(placeid",{"_index":660,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.getreservedplaceforuser(req.user_id",{"_index":664,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.getreservedplaceforuser(userid",{"_index":566,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.getvalueorarray(value",{"_index":807,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["this.getvalues(value).filter(value",{"_index":820,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["this.httpservice.post",{"_index":109,"title":{},"body":{"injectables/AuthApi.html":{}}}],["this.parkplacereposiotry.create",{"_index":652,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacereposiotry.findone",{"_index":659,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacereposiotry.merge",{"_index":651,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacereposiotry.save(place",{"_index":654,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacesinforeposiotry.create",{"_index":647,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacesinforeposiotry.findone",{"_index":645,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacesinforeposiotry.merge",{"_index":646,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkplacesinforeposiotry.save(info",{"_index":650,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkreposiotry.create",{"_index":639,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkreposiotry.find",{"_index":644,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkreposiotry.findone",{"_index":641,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkreposiotry.merge",{"_index":638,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.parkreposiotry.save",{"_index":640,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.placeisreserved(placeid",{"_index":668,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.reflector.getallandoverride",{"_index":781,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reservedplacereposiotry.create",{"_index":671,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.reservedplacereposiotry.findone",{"_index":655,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.reservedplacereposiotry.merge",{"_index":670,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.reservedplacereposiotry.save(reserveplace",{"_index":679,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.reservedplacereposiotry.save(resrvedplace",{"_index":689,"title":{},"body":{"injectables/ParkingService.html":{}}}],["this.service.cancelreserve(reservedplace.id",{"_index":567,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.createpark(req).then",{"_index":525,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.createparkplace(id",{"_index":544,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.createparkplaceinfo(park.id",{"_index":526,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.getlastparkplacesinfo(id",{"_index":541,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.getpark",{"_index":536,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.getparks(query",{"_index":538,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.getreservedplaceforuser(userid",{"_index":561,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.service.reserveplace(placeid",{"_index":551,"title":{},"body":{"controllers/ParkingController.html":{}}}],["this.setvalue(value",{"_index":809,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["this.setvalues(value",{"_index":819,"title":{},"body":{"injectables/ValuesInEnumPipe.html":{}}}],["this.type",{"_index":709,"title":{},"body":{"classes/ParkingServiceError.html":{}}}],["this.valuein(value",{"_index":390,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["this.valuesin(value",{"_index":388,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["throw",{"_index":148,"title":{},"body":{"injectables/AuthMiddleware.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{}}}],["time",{"_index":274,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/ReservedPlaceInfo.html":{}}}],["timestamp",{"_index":342,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlacesInfo.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["to(value",{"_index":725,"title":{},"body":{"classes/PointTransformer.html":{}}}],["token",{"_index":96,"title":{},"body":{"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"guards/RoleGuard.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["totak",{"_index":359,"title":{},"body":{"entities/Park.html":{}}}],["total",{"_index":219,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{}}}],["totalplaces",{"_index":204,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{}}}],["touch",{"_index":941,"title":{},"body":{"index.html":{}}}],["transform",{"_index":717,"title":{},"body":{"classes/PointTransformer.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["transform(value",{"_index":799,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["transformer",{"_index":395,"title":{},"body":{"entities/ParkPlace.html":{},"dependencies.html":{}}}],["true",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{}}}],["try",{"_index":111,"title":{},"body":{"injectables/AuthApi.html":{},"controllers/ParkingController.html":{}}}],["twitter",{"_index":947,"title":{},"body":{"index.html":{}}}],["type",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthApi.html":{},"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"classes/GetParkParams.html":{},"classes/GetParkPlaceInfoResp.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksParams.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"classes/ParkEdgesUtils.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"classes/Point.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.ts",{"_index":878,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":960,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":365,"title":{},"body":{"entities/Park.html":{},"entities/ParkPlace.html":{},"entities/ParkPlacesInfo.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/PointTransformer.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/ParkingModule.html":{}}}],["typeormmodule.forfeature",{"_index":583,"title":{},"body":{"modules/ParkingModule.html":{}}}],["typeormmodule.forrootasync",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["types/geojson",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":905,"title":{},"body":{"index.html":{}}}],["ui",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":141,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["undefined",{"_index":147,"title":{},"body":{"injectables/AuthMiddleware.html":{},"classes/CreateParkPlaceReq.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"classes/GetParksResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/ParkPlace.html":{},"guards/RoleGuard.html":{}}}],["undefined})@isdatestring",{"_index":248,"title":{},"body":{"classes/CreateReservePlaceReq.html":{}}}],["undefined})@isenum(placetype",{"_index":174,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["undefined})@isuuid",{"_index":176,"title":{},"body":{"classes/CreateParkPlaceReq.html":{}}}],["unit",{"_index":918,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":447,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":959,"title":{},"body":{"properties.html":{}}}],["updateat",{"_index":332,"title":{},"body":{"classes/GetReservedPlaceResp.html":{}}}],["updated",{"_index":275,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkResp.html":{}}}],["updatedat",{"_index":234,"title":{},"body":{"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/GetParkParams.html":{},"classes/GetParkResp.html":{},"classes/GetReservedPlaceResp.html":{},"entities/Park.html":{},"entities/ReservedPlace.html":{}}}],["url",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":128,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["use(req",{"_index":131,"title":{},"body":{"injectables/AuthMiddleware.html":{}}}],["usefactory",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":489,"title":{},"body":{"controllers/ParkingController.html":{}}}],["user",{"_index":334,"title":{},"body":{"classes/GetReservedPlaceResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"classes/ParkingServiceError.html":{},"entities/ReservedPlace.html":{},"entities/ReservedPlaceInfo.html":{},"guards/RoleGuard.html":{},"miscellaneous/enumerations.html":{}}}],["user_id",{"_index":323,"title":{},"body":{"classes/GetReservedPlaceResp.html":{},"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"entities/ReservedPlace.html":{}}}],["useralreadyreserveplace",{"_index":703,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["userdonthavereservedplace",{"_index":701,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["userid",{"_index":440,"title":{},"body":{"controllers/ParkingController.html":{},"injectables/ParkingService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["utils",{"_index":374,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["utils/get",{"_index":776,"title":{},"body":{"guards/RoleGuard.html":{}}}],["uuid",{"_index":272,"title":{},"body":{"classes/GetParkParams.html":{},"classes/GetParkPlaceResp.html":{},"classes/GetParkResp.html":{},"entities/Park.html":{},"entities/ParkPlace.html":{}}}],["validator",{"_index":183,"title":{},"body":{"classes/CreateParkPlaceReq.html":{},"classes/CreateParkReq.html":{},"classes/CreateParkResp.html":{},"classes/CreateReservePlaceReq.html":{},"dependencies.html":{}}}],["value",{"_index":384,"title":{},"body":{"classes/ParkEdgesUtils.html":{},"controllers/ParkingController.html":{},"classes/PointTransformer.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.coordinates",{"_index":730,"title":{},"body":{"classes/PointTransformer.html":{}}}],["value.edges",{"_index":533,"title":{},"body":{"controllers/ParkingController.html":{}}}],["valuein",{"_index":377,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["valuein(value",{"_index":382,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["valueorarray",{"_index":806,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["valueorarraytoarray",{"_index":508,"title":{"injectables/ValueOrArrayToArray.html":{}},"body":{"controllers/ParkingController.html":{},"injectables/ValueOrArrayToArray.html":{},"coverage.html":{}}}],["values",{"_index":381,"title":{},"body":{"classes/ParkEdgesUtils.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["values.filter",{"_index":389,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["valuesin",{"_index":378,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["valuesin(...values",{"_index":385,"title":{},"body":{"classes/ParkEdgesUtils.html":{}}}],["valuesinenumpipe",{"_index":512,"title":{"injectables/ValuesInEnumPipe.html":{}},"body":{"controllers/ParkingController.html":{},"injectables/ValuesInEnumPipe.html":{},"coverage.html":{}}}],["valuetransformer",{"_index":720,"title":{},"body":{"classes/PointTransformer.html":{}}}],["valuetype",{"_index":795,"title":{},"body":{"injectables/ValueOrArrayToArray.html":{}}}],["variable",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":971,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":957,"title":{},"body":{"properties.html":{}}}],["void",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"injectables/ValueOrArrayToArray.html":{},"injectables/ValuesInEnumPipe.html":{}}}],["watch",{"_index":913,"title":{},"body":{"index.html":{}}}],["website",{"_index":945,"title":{},"body":{"index.html":{}}}],["x",{"_index":728,"title":{},"body":{"classes/PointTransformer.html":{}}}],["y",{"_index":729,"title":{},"body":{"classes/PointTransformer.html":{}}}],["you'd",{"_index":934,"title":{},"body":{"index.html":{}}}],["younotreservethisplace",{"_index":705,"title":{},"body":{"classes/ParkingServiceError.html":{},"miscellaneous/enumerations.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthApiModule.html":{},"modules/ParkingModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthApiModule\n\nAuthApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthApiModule->AppModule\n\n\n\n\n\nParkingModule\n\nParkingModule\n\nAppModule -->\n\nParkingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthApiModule\n                        \n                        \n                            ParkingModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthApiModule } from './common/api/auth.api.module';\nimport { ParkingController } from './parking/parking.controller';\nimport { ParkingModule } from './parking/parking.module';\nimport { HttpModule } from \"@nestjs/axios\";\nimport { AuthMiddleware } from './common/middlewares/auth.middleware';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot(\n            {\n                isGlobal: true,\n            }\n        ),\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            useFactory: (configService: ConfigService) => ({\n                type: \"postgres\",\n                autoLoadEntities: true,\n                synchronize: true,\n                url: configService.get(\"PARKING_DATABASE_URI\")\n            }),\n            inject: [ConfigService]\n        }),\n        ParkingModule,\n        HttpModule,\n        AuthApiModule,\n    ],\n    controllers: [\n        \n    ],\n    providers: [\n        \n    ],\n})\nexport class AppModule implements NestModule{\n    configure(consumer: MiddlewareConsumer) {\n        consumer\n            .apply(AuthMiddleware)\n            .forRoutes(ParkingController)\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthApi.html":{"url":"injectables/AuthApi.html","title":"injectable - AuthApi","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthApi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/api/auth.api.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthApi implementation\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/api/auth.api.ts:32\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthApi.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(req: CheckTokenReq)\n                \n            \n\n\n            \n                \n                    Defined in src/common/api/auth.api.ts:54\n                \n            \n\n\n            \n                \n                    checkToken method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CheckTokenReq\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        {Promise}\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/common/api/auth.api.ts:32\n                        \n                    \n\n            \n                \n                    baseUrl of api\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { HttpStatus, Injectable } from \"@nestjs/common\"\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { firstValueFrom } from \"rxjs\";\n\nexport type CheckTokenReq = {\n    token: string\n}\n\nexport type CheckTokenResult = \"ok\" | \"invalid\"\n\nexport type CheckTokenResp = {\n    result: CheckTokenResult\n}\n\n\n/**\n * AuthApi implementation\n *\n * @export\n * @class AuthApi\n */\n@Injectable()\nexport class AuthApi {\n    /**\n     * baseUrl of api\n     *\n     * @private\n     * @type {string}\n     * @memberof AuthApi\n     */\n    private readonly baseUrl: string\n\n    /**\n     * Creates an instance of AuthApi.\n     * @param {HttpService} httpService\n     * @param {ConfigService} configService\n     * @memberof AuthApi\n     */\n    constructor(\n        private readonly httpService: HttpService,\n        private readonly configService: ConfigService,\n    ) {\n        this.baseUrl = configService.get(\"PARKING_AUTH_API_URI\")\n    }\n\n    /**\n     * checkToken method\n     *\n     * @param {CheckTokenReq} req\n     * @return {*}  {Promise}\n     * @memberof AuthApi\n     */\n    async checkToken(\n        req: CheckTokenReq,\n    ): Promise {\n        const resp = this.httpService.post(\n            this.baseUrl + '/auth/checkToken',\n            req,\n            {\n\n            }\n        )\n        \n        try {    \n            const result = await firstValueFrom(resp)\n            switch (result.status) {\n                case HttpStatus.OK:\n                    return {\n                        result: \"ok\"\n                    }\n                default:\n                    return {\n                        result: \"invalid\"\n                    }\n            }\n        } catch(e) {\n            return {\n                result: \"invalid\"\n            }\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthApiModule.html":{"url":"modules/AuthApiModule.html","title":"module - AuthApiModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthApiModule\n\n\n\ncluster_AuthApiModule_exports\n\n\n\ncluster_AuthApiModule_providers\n\n\n\n\nAuthApi \n\nAuthApi \n\n\n\nAuthApiModule\n\nAuthApiModule\n\nAuthApi  -->\n\nAuthApiModule->AuthApi \n\n\n\n\n\nAuthApi\n\nAuthApi\n\nAuthApiModule -->\n\nAuthApi->AuthApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/api/auth.api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthApi\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthApi\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { AuthApi } from \"./auth.api\";\n\n@Module(\n    {\n        imports: [\n            HttpModule,\n            ConfigModule,\n        ],\n        exports: [\n            AuthApi,\n        ],\n        providers: [\n            AuthApi,\n        ]\n    }\n)\nexport class AuthApiModule{}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthMiddleware.html":{"url":"injectables/AuthMiddleware.html","title":"injectable - AuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/auth.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthMiddleware to auth req\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authApi: AuthApi)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/auth.middleware.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of AuthMiddleware.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authApi\n                                                  \n                                                        \n                                                                        AuthApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/auth.middleware.ts:34\n                \n            \n\n\n            \n                \n                    middleware method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, Injectable, NestMiddleware, UnauthorizedException } from \"@nestjs/common\";\n\nimport { Request, Response, NextFunction } from 'express';\nimport { AuthApi, CheckTokenResp } from \"../api/auth.api\";\n\n/**\n * AuthMiddleware to auth req\n *\n * @export\n * @class AuthMiddleware\n * @implements {NestMiddleware}\n */\n@Injectable()\nexport class AuthMiddleware implements NestMiddleware {\n    /**\n     * Creates an instance of AuthMiddleware.\n     * @param {AuthApi} authApi\n     * @memberof AuthMiddleware\n     */\n    constructor(\n        private readonly authApi: AuthApi,\n    ) {\n\n    }\n\n    /**\n     * middleware method\n     *\n     * @param {Request} req\n     * @param {Response} res\n     * @param {NextFunction} next\n     * @memberof AuthMiddleware\n     */\n    async use(req: Request, res: Response, next: NextFunction ) {\n        const authHeader = req.headers.authorization\n        if(authHeader == undefined) {\n            throw new UnauthorizedException()\n        }\n\n        const [_, token] = authHeader.split(\" \")\n        if(token == undefined) {\n            throw new UnauthorizedException()\n        }\n        const resp = await this.authApi.checkToken({token: token})\n        if (resp.result == \"invalid\") {\n            throw new UnauthorizedException()\n        }\n\n        next()\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateParkPlaceReq.html":{"url":"classes/CreateParkPlaceReq.html","title":"class - CreateParkPlaceReq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateParkPlaceReq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/create-park-place.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                CreateParkPlaceReq\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coords\n                            \n                            \n                                floor\n                            \n                            \n                                placeType\n                            \n                            \n                                placeUUID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        coords\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park-place.dto.ts:68\n                        \n                    \n\n            \n                \n                    coords of place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park-place.dto.ts:23\n                        \n                    \n\n            \n                \n                    floor of place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PlaceType, example: undefined})@IsEnum(PlaceType, {})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park-place.dto.ts:52\n                        \n                    \n\n            \n                \n                    place type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park-place.dto.ts:37\n                        \n                    \n\n            \n                \n                    placeUUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsEnum, IsNumber, IsUUID } from \"class-validator\"\nimport { randomUUID } from \"crypto\"\nimport { Geometry, Position } from \"geojson\"\nimport { Point } from \"../../common/models/point\"\nimport { PlaceType } from \"../models/place-type\"\n\n/**\n * CreateParkPlaceReq\n *\n * @export\n * @class CreateParkPlaceReq\n */\nexport class CreateParkPlaceReq {\n    /**\n     * floor of place\n     *\n     * @type {number}\n     * @memberof CreateParkPlaceReq\n     */\n    @ApiProperty()\n    @IsNumber()\n    floor: number\n\n    /**\n     * placeUUID\n     *\n     * @type {string}\n     * @memberof CreateParkPlaceReq\n     */\n    @ApiProperty(\n        {\n            example: randomUUID(),\n        }\n    )\n    @IsUUID()\n    placeUUID: string\n\n    /**\n     * place type\n     *\n     * @type {PlaceType}\n     * @memberof CreateParkPlaceReq\n     */\n    @ApiProperty(\n        {\n            enum: PlaceType,\n            example: PlaceType.Standart\n        }\n    )\n    @IsEnum(PlaceType, {})\n    placeType: PlaceType\n    \n    /**\n     * coords of place\n     *\n     * @type {Point}\n     * @memberof CreateParkPlaceReq\n     */\n    @ApiProperty(\n        {\n            example: {\n                coordinates: [1, 2]\n            },\n            type: [Number, Number]\n        }\n    )\n    coords: Point\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateParkReq.html":{"url":"classes/CreateParkReq.html","title":"class - CreateParkReq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateParkReq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/create-park.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                CreateParkReq body\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                parkUUID\n                            \n                            \n                                totalPlaces\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Проспект вернадского, д 78'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:39\n                        \n                    \n\n            \n                \n                    address of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsLatitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:29\n                        \n                    \n\n            \n                \n                    latitude of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsLongitude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:19\n                        \n                    \n\n            \n                \n                    longitude of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'c2d29867-3d0b-d497-9191-18a9d8ee7830'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:58\n                        \n                    \n\n            \n                \n                    parkUUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 12})@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:49\n                        \n                    \n\n            \n                \n                    total places in the park\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsInt, IsLatitude, IsLongitude, IsString, IsUUID } from \"class-validator\"\n\n/**\n * CreateParkReq body\n *\n * @export\n * @class CreateParkReq\n */\nexport class CreateParkReq {\n    /**\n     * longitude of park\n     *\n     * @type {number}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty()\n    @IsLongitude()\n    longitude: number\n\n    /**\n     * latitude of park\n     *\n     * @type {number}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty()\n    @IsLatitude()\n    latitude: number\n\n    /**\n     * address of park\n     *\n     * @type {string}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty({example: \"Проспект вернадского, д 78\"})\n    @IsString()\n    address: string\n    \n    /**\n     * total places in the park\n     *\n     * @type {number}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty({example: 12})\n    @IsInt()\n    totalPlaces: number\n\n    /**\n     * parkUUID \n     *\n     * @type {string}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty({example: \"c2d29867-3d0b-d497-9191-18a9d8ee7830\"})\n    parkUUID: string\n}\n\n/**\n * create park respocne\n *\n * @export\n * @class CreateParkResp\n */\nexport class CreateParkResp {\n    /**\n     * id of park\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    id: number\n\n    /**\n     * parkUUID \n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    parkUUID: string\n\n    /**\n     * longitutde of park\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    longitude: number\n\n    /**\n     * latitude of park\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    latitude: number\n\n    /**\n     * address of park\n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    address: string\n\n    /**\n     * totalPlaces\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    totalPlaces: number\n\n    /**\n     * createdAt date of park\n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    createdAt: string\n\n    /**\n     * updatedAt date of entity\n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    updatedAt: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateParkResp.html":{"url":"classes/CreateParkResp.html","title":"class - CreateParkResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateParkResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/create-park.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                create park respocne\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                parkUUID\n                            \n                            \n                                totalPlaces\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:111\n                        \n                    \n\n            \n                \n                    address of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:129\n                        \n                    \n\n            \n                \n                    createdAt date of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:75\n                        \n                    \n\n            \n                \n                    id of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:102\n                        \n                    \n\n            \n                \n                    latitude of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:93\n                        \n                    \n\n            \n                \n                    longitutde of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:84\n                        \n                    \n\n            \n                \n                    parkUUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:120\n                        \n                    \n\n            \n                \n                    totalPlaces\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-park.dto.ts:138\n                        \n                    \n\n            \n                \n                    updatedAt date of entity\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsInt, IsLatitude, IsLongitude, IsString, IsUUID } from \"class-validator\"\n\n/**\n * CreateParkReq body\n *\n * @export\n * @class CreateParkReq\n */\nexport class CreateParkReq {\n    /**\n     * longitude of park\n     *\n     * @type {number}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty()\n    @IsLongitude()\n    longitude: number\n\n    /**\n     * latitude of park\n     *\n     * @type {number}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty()\n    @IsLatitude()\n    latitude: number\n\n    /**\n     * address of park\n     *\n     * @type {string}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty({example: \"Проспект вернадского, д 78\"})\n    @IsString()\n    address: string\n    \n    /**\n     * total places in the park\n     *\n     * @type {number}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty({example: 12})\n    @IsInt()\n    totalPlaces: number\n\n    /**\n     * parkUUID \n     *\n     * @type {string}\n     * @memberof CreateParkReq\n     */\n    @ApiProperty({example: \"c2d29867-3d0b-d497-9191-18a9d8ee7830\"})\n    parkUUID: string\n}\n\n/**\n * create park respocne\n *\n * @export\n * @class CreateParkResp\n */\nexport class CreateParkResp {\n    /**\n     * id of park\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    id: number\n\n    /**\n     * parkUUID \n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    parkUUID: string\n\n    /**\n     * longitutde of park\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    longitude: number\n\n    /**\n     * latitude of park\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    latitude: number\n\n    /**\n     * address of park\n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    address: string\n\n    /**\n     * totalPlaces\n     *\n     * @type {number}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    totalPlaces: number\n\n    /**\n     * createdAt date of park\n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    createdAt: string\n\n    /**\n     * updatedAt date of entity\n     *\n     * @type {string}\n     * @memberof CreateParkResp\n     */\n    @ApiProperty()\n    updatedAt: string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReservePlaceReq.html":{"url":"classes/CreateReservePlaceReq.html","title":"class - CreateReservePlaceReq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReservePlaceReq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/create-reserve-place.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                created reserved place req\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-reserve-place.dto.ts:23\n                        \n                    \n\n            \n                \n                    resreved from date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/create-reserve-place.dto.ts:37\n                        \n                    \n\n            \n                \n                    reserved to date\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { IsDateString } from \"class-validator\"\n\n/**\n * created reserved place req\n *\n * @export\n * @class CreateReservePlaceReq\n */\nexport class CreateReservePlaceReq {\n    /**\n     * resreved from date\n     *\n     * @type {Date}\n     * @memberof CreateReservePlaceReq\n     */\n    @ApiProperty(\n        {\n            example: new Date(Date.now())\n        }\n    )\n    @IsDateString()\n    from!: Date\n\n    /**\n     * reserved to date\n     *\n     * @type {Date}\n     * @memberof CreateReservePlaceReq\n     */\n    @ApiProperty(\n        {\n            example: new Date(Date.now())\n        }\n    )\n    @IsDateString()\n    to!: Date\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetParkParams.html":{"url":"classes/GetParkParams.html","title":"class - GetParkParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetParkParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-park.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                query params\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                edges\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:23\n                        \n                    \n\n            \n                \n                    edges of park\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { randomUUID } from \"crypto\"\nimport { ParkEdges } from \"../models/park-edges.model\"\nimport { ParkPlace } from \"../models/park-place.model\"\nimport { ParkPlacesInfo } from \"../models/park-places-info.model\"\nimport { Park } from \"../models/park.model\"\nimport { GetParkPlaceInfoResp } from \"./get-park-place-info.dto\"\nimport { GetParkPlaceResp } from \"./get-park-place.dto\"\n\n/**\n * query params \n *\n * @export\n * @class GetParkParams\n */\nexport class GetParkParams {\n    /**\n     * edges of park\n     *\n     * @type {string[]}\n     * @memberof GetParkParams\n     */\n    edges?: string[]\n}\n\n/**\n * park responce\n *\n * @export\n * @class GetParkResp\n * @implements {Park}\n */\nexport class GetParkResp implements Park {\n    /**\n     * park id\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    id: number\n\n    /**\n     * park UUID\n     *\n     * @type {string}\n     * @memberof GetParkResp\n     */\n    @ApiProperty(\n        {\n            example: randomUUID({})\n        }\n    )\n    parkUUID: string\n\n    /**\n     * longitude\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    longitude: number\n\n    /**\n     *     latitude\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    latitude: number\n\n    /**\n     * addres of park\n     *\n     * @type {string}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    address: string\n\n    /**\n     * total places in park\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    totalPlaces: number\n\n    /**\n     * created time of park\n     *\n     * @type {Date}\n     * @memberof GetParkResp\n     */\n    @ApiProperty({\n        example: new Date(Date.now())\n    })\n    createdAt: Date\n\n    /**\n     * updated time of park\n     *\n     * @type {Date}\n     * @memberof GetParkResp\n     */\n    @ApiProperty({\n        example: new Date(Date.now())\n    })\n    updatedAt: Date\n\n    /**\n     * parkPlacesInfo of park\n     *\n     * @type {GetParkPlaceInfoResp[]}\n     * @memberof GetParkResp\n     */\n    @ApiProperty(\n        {\n            type: [GetParkPlaceInfoResp],\n            nullable: true,\n            required: false,\n        }\n    )\n    parkPlacesInfo?: GetParkPlaceInfoResp[]\n\n    /**\n     * parkPlaces of park\n     *\n     * @type {GetParkPlaceResp[]}\n     * @memberof GetParkResp\n     */\n    @ApiProperty(\n        {\n            type: [GetParkPlaceResp],\n            nullable: true,\n            required: false,\n        }\n    )\n    parkPlaces?: GetParkPlaceResp[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetParkPlaceInfoResp.html":{"url":"classes/GetParkPlaceInfoResp.html","title":"class - GetParkPlaceInfoResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetParkPlaceInfoResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-park-place-info.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                GetParkPlaceInfo respocne\n\n            \n\n\n            \n                Implements\n            \n            \n                            ParkPlacesInfo\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                freeSpaces\n                            \n                            \n                                id\n                            \n                            \n                                occupiedSpaces\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place-info.dto.ts:46\n                        \n                    \n\n            \n                \n                    cratedAt of record\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        freeSpaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place-info.dto.ts:28\n                        \n                    \n\n            \n                \n                    free spaces\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place-info.dto.ts:19\n                        \n                    \n\n            \n                \n                    id of park place ingo\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        occupiedSpaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place-info.dto.ts:37\n                        \n                    \n\n            \n                \n                    occupied spaces\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { ParkPlacesInfo } from \"../models/park-places-info.model\";\n\n/**\n * GetParkPlaceInfo respocne\n *\n * @export\n * @class GetParkPlaceInfoResp\n * @implements {ParkPlacesInfo}\n */\nexport class GetParkPlaceInfoResp implements ParkPlacesInfo{\n    /**\n     * id of park place ingo\n     *\n     * @type {number}\n     * @memberof GetParkPlaceInfoResp\n     */\n    @ApiProperty({})\n    id: number;\n\n    /**\n     * free spaces\n     *\n     * @type {number}\n     * @memberof GetParkPlaceInfoResp\n     */\n    @ApiProperty({})\n    freeSpaces: number;\n\n    /**\n     * occupied spaces\n     *\n     * @type {number}\n     * @memberof GetParkPlaceInfoResp\n     */\n    @ApiProperty({})\n    occupiedSpaces: number;\n\n    /**\n     * cratedAt of record\n     *\n     * @type {Date}\n     * @memberof GetParkPlaceInfoResp\n     */\n    @ApiProperty({})\n    createdAt: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetParkPlaceResp.html":{"url":"classes/GetParkPlaceResp.html","title":"class - GetParkPlaceResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetParkPlaceResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-park-place.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                GetParkPlace respnce\n\n            \n\n\n            \n                Implements\n            \n            \n                            ParkPlace\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coords\n                            \n                            \n                                floor\n                            \n                            \n                                id\n                            \n                            \n                                placeType\n                            \n                            \n                                placeUUID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        coords\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place.dto.ts:74\n                        \n                    \n\n            \n                \n                    coords of place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place.dto.ts:32\n                        \n                    \n\n            \n                \n                    floor of place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place.dto.ts:23\n                        \n                    \n\n            \n                \n                    id of park palce\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place.dto.ts:58\n                        \n                    \n\n            \n                \n                    place type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park-place.dto.ts:45\n                        \n                    \n\n            \n                \n                    place UUID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { randomUUID } from \"crypto\";\nimport { Geometry } from \"geojson\";\nimport { Point } from \"../../common/models/point\";\nimport { ParkPlace } from \"../models/park-place.model\";\nimport { PlaceType } from \"../models/place-type\";\n\n/**\n * GetParkPlace respnce\n *\n * @export\n * @class GetParkPlaceResp\n * @implements {ParkPlace}\n */\nexport class GetParkPlaceResp implements ParkPlace {\n    /**\n     * id of park palce\n     *\n     * @type {number}\n     * @memberof GetParkPlaceResp\n     */\n    @ApiProperty()\n    id: number;\n\n    /**\n     * floor of place\n     *\n     * @type {number}\n     * @memberof GetParkPlaceResp\n     */\n    @ApiProperty()\n    floor: number;\n\n    /**\n     * place UUID\n     *\n     * @type {string}\n     * @memberof GetParkPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: randomUUID()\n        }\n    )\n    placeUUID: string;\n\n    /**\n     * place type\n     *\n     * @type {PlaceType}\n     * @memberof GetParkPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: PlaceType.Standart,\n        }\n    )\n    placeType: PlaceType;\n\n    /**\n     * coords of place\n     *\n     * @type {Point}\n     * @memberof GetParkPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: {\n                type: \"Point\",\n                coordinates: [1, 2]\n            },\n        }\n    )\n    coords: Point;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetParkResp.html":{"url":"classes/GetParkResp.html","title":"class - GetParkResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetParkResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-park.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                park responce\n\n            \n\n\n            \n                Implements\n            \n            \n                            Park\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                    Optional\n                                parkPlaces\n                            \n                            \n                                    Optional\n                                parkPlacesInfo\n                            \n                            \n                                parkUUID\n                            \n                            \n                                totalPlaces\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:81\n                        \n                    \n\n            \n                \n                    addres of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:101\n                        \n                    \n\n            \n                \n                    created time of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:41\n                        \n                    \n\n            \n                \n                    park id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:72\n                        \n                    \n\n            \n                \n                    latitude\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:63\n                        \n                    \n\n            \n                \n                    longitude\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parkPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GetParkPlaceResp[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, nullable: true, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:142\n                        \n                    \n\n            \n                \n                    parkPlaces of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parkPlacesInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GetParkPlaceInfoResp[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, nullable: true, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:127\n                        \n                    \n\n            \n                \n                    parkPlacesInfo of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:54\n                        \n                    \n\n            \n                \n                    park UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:90\n                        \n                    \n\n            \n                \n                    total places in park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-park.dto.ts:112\n                        \n                    \n\n            \n                \n                    updated time of park\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\"\nimport { randomUUID } from \"crypto\"\nimport { ParkEdges } from \"../models/park-edges.model\"\nimport { ParkPlace } from \"../models/park-place.model\"\nimport { ParkPlacesInfo } from \"../models/park-places-info.model\"\nimport { Park } from \"../models/park.model\"\nimport { GetParkPlaceInfoResp } from \"./get-park-place-info.dto\"\nimport { GetParkPlaceResp } from \"./get-park-place.dto\"\n\n/**\n * query params \n *\n * @export\n * @class GetParkParams\n */\nexport class GetParkParams {\n    /**\n     * edges of park\n     *\n     * @type {string[]}\n     * @memberof GetParkParams\n     */\n    edges?: string[]\n}\n\n/**\n * park responce\n *\n * @export\n * @class GetParkResp\n * @implements {Park}\n */\nexport class GetParkResp implements Park {\n    /**\n     * park id\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    id: number\n\n    /**\n     * park UUID\n     *\n     * @type {string}\n     * @memberof GetParkResp\n     */\n    @ApiProperty(\n        {\n            example: randomUUID({})\n        }\n    )\n    parkUUID: string\n\n    /**\n     * longitude\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    longitude: number\n\n    /**\n     *     latitude\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    latitude: number\n\n    /**\n     * addres of park\n     *\n     * @type {string}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    address: string\n\n    /**\n     * total places in park\n     *\n     * @type {number}\n     * @memberof GetParkResp\n     */\n    @ApiProperty()\n    totalPlaces: number\n\n    /**\n     * created time of park\n     *\n     * @type {Date}\n     * @memberof GetParkResp\n     */\n    @ApiProperty({\n        example: new Date(Date.now())\n    })\n    createdAt: Date\n\n    /**\n     * updated time of park\n     *\n     * @type {Date}\n     * @memberof GetParkResp\n     */\n    @ApiProperty({\n        example: new Date(Date.now())\n    })\n    updatedAt: Date\n\n    /**\n     * parkPlacesInfo of park\n     *\n     * @type {GetParkPlaceInfoResp[]}\n     * @memberof GetParkResp\n     */\n    @ApiProperty(\n        {\n            type: [GetParkPlaceInfoResp],\n            nullable: true,\n            required: false,\n        }\n    )\n    parkPlacesInfo?: GetParkPlaceInfoResp[]\n\n    /**\n     * parkPlaces of park\n     *\n     * @type {GetParkPlaceResp[]}\n     * @memberof GetParkResp\n     */\n    @ApiProperty(\n        {\n            type: [GetParkPlaceResp],\n            nullable: true,\n            required: false,\n        }\n    )\n    parkPlaces?: GetParkPlaceResp[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetParksParams.html":{"url":"classes/GetParksParams.html","title":"class - GetParksParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetParksParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-parks.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                edges param\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                edges\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-parks.dto.ts:17\n                        \n                    \n\n            \n                \n                    edges\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { GetParkResp } from \"./get-park.dto\";\n\n/**\n * edges param\n *\n * @export\n * @class GetParksParams\n */\nexport class GetParksParams {\n    /**\n     * edges\n     *\n     * @type {string[]}\n     * @memberof GetParksParams\n     */\n    edges?: string[]\n}\n\n/**\n * Get parks responce\n *\n * @export\n * @class GetParksResp\n */\nexport class GetParksResp {\n    /**\n     * parks\n     *\n     * @type {[GetParkResp]}\n     * @memberof GetParksResp\n     */\n    @ApiProperty(\n        {\n            type: [GetParkResp],\n        }\n    )\n    items: [GetParkResp]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetParksResp.html":{"url":"classes/GetParksResp.html","title":"class - GetParksResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetParksResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-parks.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Get parks responce\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                items\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         [GetParkResp]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-parks.dto.ts:38\n                        \n                    \n\n            \n                \n                    parks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { GetParkResp } from \"./get-park.dto\";\n\n/**\n * edges param\n *\n * @export\n * @class GetParksParams\n */\nexport class GetParksParams {\n    /**\n     * edges\n     *\n     * @type {string[]}\n     * @memberof GetParksParams\n     */\n    edges?: string[]\n}\n\n/**\n * Get parks responce\n *\n * @export\n * @class GetParksResp\n */\nexport class GetParksResp {\n    /**\n     * parks\n     *\n     * @type {[GetParkResp]}\n     * @memberof GetParksResp\n     */\n    @ApiProperty(\n        {\n            type: [GetParkResp],\n        }\n    )\n    items: [GetParkResp]\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetReservedPlaceResp.html":{"url":"classes/GetReservedPlaceResp.html","title":"class - GetReservedPlaceResp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetReservedPlaceResp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/dto/get-reserve-place.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Get reserved place responce\n\n            \n\n\n            \n                Implements\n            \n            \n                            ReservedPlace\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                done\n                            \n                            \n                                from\n                            \n                            \n                                id\n                            \n                            \n                                to\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:80\n                        \n                    \n\n            \n                \n                    createdAt date of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:67\n                        \n                    \n\n            \n                \n                    is done reserved process\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:41\n                        \n                    \n\n            \n                \n                    reserved from date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:19\n                        \n                    \n\n            \n                \n                    id of reserved place entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:54\n                        \n                    \n\n            \n                \n                    reserved to date\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:93\n                        \n                    \n\n            \n                \n                    updateAt date of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/dto/get-reserve-place.dto.ts:28\n                        \n                    \n\n            \n                \n                    user id that reserve place\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { ReservedPlace } from \"../models/reserver-place.model\";\n\n/**\n * Get reserved place responce\n *\n * @export\n * @class GetReservedPlaceResp\n * @implements {ReservedPlace}\n */\nexport class GetReservedPlaceResp implements ReservedPlace{\n    /**\n     * id of reserved place entity\n     *\n     * @type {number}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty()\n    id: number;\n\n    /**\n     * user id that reserve place\n     *\n     * @type {number}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty()\n    user_id: number;\n\n    /**\n     * reserved from date\n     *\n     * @type {Date}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: new Date(Date.now())\n        }\n    )\n    from: Date;\n\n    /**\n     * reserved to date\n     *\n     * @type {Date}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: new Date(Date.now())\n        }\n    )\n    to: Date;\n    \n    /**\n     * is done reserved process\n     *\n     * @type {boolean}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: true\n        }\n    )\n    done: boolean;\n    \n    /**\n     * createdAt date of entity\n     *\n     * @type {Date}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: new Date(Date.now())\n        }\n    )\n    createdAt: Date;\n    \n    /**\n     * updateAt date of entity\n     *\n     * @type {Date}\n     * @memberof GetReservedPlaceResp\n     */\n    @ApiProperty(\n        {\n            example: new Date(Date.now())\n        }\n    )\n    updatedAt: Date;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Park.html":{"url":"entities/Park.html","title":"entity - Park","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Park\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/entity/park.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Park entity repesantation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                parkPlaces\n                            \n                            \n                                parkPlacesInfo\n                            \n                            \n                                parkUUID\n                            \n                            \n                                totalPlaces\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:58\n                        \n                    \n\n            \n                \n                    addres of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: 'NOW()'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:76\n                        \n                    \n\n            \n                \n                    createdAt of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:22\n                        \n                    \n\n            \n                \n                    id of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'double precision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:49\n                        \n                    \n\n            \n                \n                    latitude of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'double precision'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:40\n                        \n                    \n\n            \n                \n                    longitutde of park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ParkPlace[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, parkPlace => parkPlace.park)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:105\n                        \n                    \n\n            \n                \n                    parkPlaces edge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkPlacesInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ParkPlacesInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, parkPlacesInfo => parkPlacesInfo.park)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:95\n                        \n                    \n\n            \n                \n                    parkPlacesInfo edge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:31\n                        \n                    \n\n            \n                \n                    park uuid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:67\n                        \n                    \n\n            \n                \n                    totak place in park\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', onUpdate: 'NOW()', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park.entity.ts:85\n                        \n                    \n\n            \n                \n                    updatedAt of entity\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, OneToMany, PrimaryGeneratedColumn, Relation, Timestamp } from \"typeorm\";\nimport { ParkPlacesInfo } from \"./park-place-info.entity\";\nimport { ParkPlace } from \"./park-place.entity\";\nimport { Park as ParkType } from \"../models/park.model\";\n\n/**\n * Park entity repesantation\n *\n * @export\n * @class Park\n * @implements {ParkType}\n */\n@Entity()\nexport class Park implements ParkType {\n    /**\n     * id of entity\n     *\n     * @type {number}\n     * @memberof Park\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n\n    /**\n     *park uuid\n     *\n     * @type {string}\n     * @memberof Park\n     */\n    @Column({type: 'uuid'})\n    parkUUID: string\n\n    /**\n     * longitutde of park \n     *\n     * @type {number}\n     * @memberof Park\n     */\n    @Column({type: 'double precision'})\n    longitude: number\n\n    /**\n     * latitude of park\n     *\n     * @type {number}\n     * @memberof Park\n     */\n    @Column({type: 'double precision'})\n    latitude: number\n\n    /**\n     * addres of park\n     *\n     * @type {string}\n     * @memberof Park\n     */\n    @Column()\n    address: string\n\n    /**\n     * totak place in park\n     *\n     * @type {number}\n     * @memberof Park\n     */\n    @Column()\n    totalPlaces: number\n\n    /**\n     * createdAt of entity\n     *\n     * @type {Date}\n     * @memberof Park\n     */\n    @Column({type: 'timestamp', default: 'NOW()'})\n    createdAt: Date\n\n    /**\n     * updatedAt of entity\n     *\n     * @type {Date}\n     * @memberof Park\n     */\n    @Column({type: 'timestamp', onUpdate: 'NOW()', nullable: true})\n    updatedAt: Date\n\n    /**\n     * parkPlacesInfo edge\n     *\n     * @type {ParkPlacesInfo[]}\n     * @memberof Park\n     */\n    @OneToMany(() => ParkPlacesInfo, (parkPlacesInfo) => parkPlacesInfo.park)\n    @JoinColumn()\n    parkPlacesInfo: ParkPlacesInfo[]\n\n    /**\n     * parkPlaces edge\n     *\n     * @type {ParkPlace[]}\n     * @memberof Park\n     */\n    @OneToMany(() => ParkPlace, (parkPlace) => parkPlace.park)\n    @JoinColumn()\n    parkPlaces: ParkPlace[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParkEdgesUtils.html":{"url":"classes/ParkEdgesUtils.html","title":"class - ParkEdgesUtils","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParkEdgesUtils\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/models/park-edges.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Utils for ParkEdges enum\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                filterValues\n                            \n                            \n                                    Static\n                                valueIn\n                            \n                            \n                                    Static\n                                valuesIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        filterValues\n                        \n                    \n                \n            \n            \n                \n                    \n                    filterValues(values: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/parking/models/park-edges.model.ts:53\n                \n            \n\n\n            \n                \n                    filterValues\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        {string[]}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        valueIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    valueIn(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/models/park-edges.model.ts:41\n                \n            \n\n\n            \n                \n                    valueIn\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        {boolean}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        valuesIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    valuesIn(...values: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/parking/models/park-edges.model.ts:27\n                \n            \n\n\n            \n                \n                    valuesIn\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        {boolean}\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ParkEdges {\n    parkPlacesInfo = \"parkPlacesInfo\",\n    parkPlaces = \"parkPlaces\"\n}\n\n/**\n * Utils for ParkEdges enum\n *\n * @export\n * @class ParkEdgesUtils\n */\nexport class ParkEdgesUtils {\n    /**\n     * valuesIn\n     *\n     * @static\n     * @param {...string[]} values\n     * @return {*}  {boolean}\n     * @memberof ParkEdgesUtils\n     */\n    static valuesIn(...values: string[]): boolean {\n        for(const value of values) {\n            return value in ParkEdges\n        }\n    }\n\n    /**\n     * valueIn\n     *\n     * @static\n     * @param {string} value\n     * @return {*}  {boolean}\n     * @memberof ParkEdgesUtils\n     */\n    static valueIn(value: string): boolean {\n        return this.valuesIn(value)\n    }\n\n    /**\n     * filterValues\n     *\n     * @static\n     * @param {string[]} values\n     * @return {*}  {string[]}\n     * @memberof ParkEdgesUtils\n     */\n    static filterValues(values: string[]): string[] {\n        return values.filter(\n            value => this.valueIn(value)\n        )\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ParkPlace.html":{"url":"entities/ParkPlace.html","title":"entity - ParkPlace","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ParkPlace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/entity/park-place.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                ParkPlace entity represantation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coords\n                            \n                            \n                                floor\n                            \n                            \n                                id\n                            \n                            \n                                park\n                            \n                            \n                                placeType\n                            \n                            \n                                placeUUID\n                            \n                            \n                                reservedPlaces\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        coords\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Point\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'point', transformer: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:72\n                        \n                    \n\n            \n                \n                    coords of place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:35\n                        \n                    \n\n            \n                \n                    in what floor is place\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:26\n                        \n                    \n\n            \n                \n                    id of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        park\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Park\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, park => park.parkPlaces)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:81\n                        \n                    \n\n            \n                \n                    park edge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PlaceType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PlaceType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:58\n                        \n                    \n\n            \n                \n                    place type\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        placeUUID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'uuid'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:44\n                        \n                    \n\n            \n                \n                    place UUID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservedPlaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservedPlace[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, reservedPlace => reservedPlace.parkPlace)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place.entity.ts:90\n                        \n                    \n\n            \n                \n                    reservedPlaces edge\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Geometry, Point } from \"geojson\";\nimport { Column, Entity, ManyToOne, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\nimport { PlaceType } from \"../models/place-type\";\nimport { Park } from \"./park.entity\";\nimport { ReservedPlace } from \"./reserved-place.entity\";\nimport { ParkPlace as ParkPlaceType } from \"../models/park-place.model\";\nimport { PointTransformer } from \"../../common/transformers/point.transformer\";\n\n\n/**\n * ParkPlace entity represantation\n *\n * @export\n * @class ParkPlace\n * @implements {ParkPlaceType}\n */\n@Entity()\nexport class ParkPlace implements ParkPlaceType {\n    /**\n     * id of entity\n     *\n     * @type {number}\n     * @memberof ParkPlace\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n\n    /**\n     * in what floor is place \n     *\n     * @type {number}\n     * @memberof ParkPlace\n     */\n    @Column()\n    floor: number\n\n    /**\n     * place UUID\n     *\n     * @type {string}\n     * @memberof ParkPlace\n     */\n    @Column({type: 'uuid'})\n    placeUUID: string\n\n    /**\n     * place type\n     *\n     * @type {PlaceType}\n     * @memberof ParkPlace\n     */\n    @Column(\n        {\n            type: 'enum',\n            enum: PlaceType\n        }\n    )\n    placeType: PlaceType\n\n    /**\n     * coords of place\n     *\n     * @type {Point}\n     * @memberof ParkPlace\n     */\n    @Column(\n        {\n            type: 'point',\n            transformer: new PointTransformer(),\n        }\n        )\n    coords: Point\n\n    /**\n     * park edge\n     *\n     * @type {Park}\n     * @memberof ParkPlace\n     */\n    @ManyToOne(() => Park, (park) => park.parkPlaces)\n    park: Park\n\n    /**\n     * reservedPlaces edge\n     *\n     * @type {ReservedPlace[]}\n     * @memberof ParkPlace\n     */\n    @OneToMany(() => ReservedPlace, (reservedPlace) => reservedPlace.parkPlace)\n    reservedPlaces: ReservedPlace[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ParkPlacesInfo.html":{"url":"entities/ParkPlacesInfo.html","title":"entity - ParkPlacesInfo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ParkPlacesInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/entity/park-place-info.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                ParkPlaceInfo entity represantation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                freeSpaces\n                            \n                            \n                                id\n                            \n                            \n                                occupiedSpaces\n                            \n                            \n                                park\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: 'NOW()'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place-info.entity.ts:48\n                        \n                    \n\n            \n                \n                    createdAt date of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        freeSpaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place-info.entity.ts:30\n                        \n                    \n\n            \n                \n                    freeSpaces in the moment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place-info.entity.ts:21\n                        \n                    \n\n            \n                \n                    id of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        occupiedSpaces\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place-info.entity.ts:39\n                        \n                    \n\n            \n                \n                    occupiedSpaces in the moment\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        park\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Park\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, park => park.parkPlacesInfo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/park-place-info.entity.ts:57\n                        \n                    \n\n            \n                \n                    park edge\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn, Timestamp } from \"typeorm\";\nimport { Park } from \"./park.entity\";\nimport { ParkPlacesInfo as ParkPlaceInfoType } from \"../models/park-places-info.model\";\n\n/**\n *ParkPlaceInfo entity represantation\n *\n * @export\n * @class ParkPlacesInfo\n * @implements {ParkPlaceInfoType}\n */\n@Entity()\nexport class ParkPlacesInfo implements ParkPlaceInfoType {\n    /**\n     * id of entity\n     *\n     * @type {number}\n     * @memberof ParkPlacesInfo\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n\n    /**\n     * freeSpaces in the moment\n     *\n     * @type {number}\n     * @memberof ParkPlacesInfo\n     */\n    @Column()\n    freeSpaces: number\n\n    /**\n     * occupiedSpaces in the moment\n     *\n     * @type {number}\n     * @memberof ParkPlacesInfo\n     */\n    @Column()\n    occupiedSpaces: number\n\n    /**\n     * createdAt date of entity\n     *\n     * @type {Date}\n     * @memberof ParkPlacesInfo\n     */\n    @Column({type: 'timestamp', default: 'NOW()'})\n    createdAt: Date\n\n    /**\n     * park edge\n     *\n     * @type {Park}\n     * @memberof ParkPlacesInfo\n     */\n    @ManyToOne(()=> Park, (park) => park.parkPlacesInfo)\n    park: Park\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ParkingController.html":{"url":"controllers/ParkingController.html","title":"controller - ParkingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ParkingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/parking.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                parking\n            \n\n\n            \n                Description\n            \n            \n                parking controller for http requests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancelReserveForUser\n                            \n                            \n                                    Async\n                                createPark\n                            \n                            \n                                    Async\n                                createPlace\n                            \n                            \n                                    Async\n                                getLastParkPlacesInfo\n                            \n                            \n                                getPark\n                            \n                            \n                                    Async\n                                getParks\n                            \n                            \n                                    Async\n                                getReservedPlaceForUser\n                            \n                            \n                                    Async\n                                reservePlace\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cancelReserveForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelReserveForUser(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/place/reserved/cancel/me')@ApiResponse({status: 200})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:242\n                \n            \n\n\n            \n                \n                    cancel reserved place for user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPark\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPark(req: CreateParkReq)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBody({type: CreateParkReq})@ApiResponse({type: CreateParkResp, status: 201})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:52\n                \n            \n\n\n            \n                \n                    create park\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CreateParkReq\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPlace\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPlace(req: CreateParkPlaceReq, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/place')@ApiBody({type: CreateParkPlaceReq})@ApiParam({name: 'id', description: 'id of park', type: Number})@ApiBearerAuth()@ApiResponse({type: GetParkPlaceResp, status: 201})\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:160\n                \n            \n\n\n            \n                \n                    create park place\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CreateParkPlaceReq\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastParkPlacesInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastParkPlacesInfo(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id/parkPlacesInfo/last')@ApiResponse({type: GetParkPlaceInfoResp, status: 200})@ApiParam({name: 'id', description: 'id of park', type: Number})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:137\n                \n            \n\n\n            \n                \n                    get last park place infos\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPark\n                        \n                    \n                \n            \n            \n                \ngetPark(id: number, query: GetParkParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiResponse({type: GetParkResp})@ApiQuery({enum: ParkEdges, isArray: true, enumName: 'edges', required: false, name: 'edges'})@ApiParam({name: 'id', description: 'id of park', type: Number})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:76\n                \n            \n\n\n            \n                \n                    get park by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                GetParkParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getParks\n                        \n                    \n                \n            \n            \n                \n                    \n                    getParks(query: GetParksParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiResponse({type: GetParksResp, status: 200})@ApiQuery({enum: ParkEdges, isArray: true, enumName: 'edges', required: false, name: 'edges'})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:107\n                \n            \n\n\n            \n                \n                    get parks\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetParksParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getReservedPlaceForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getReservedPlaceForUser(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/place/reserved/me')@ApiResponse({type: GetReservedPlaceResp, status: 200})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:223\n                \n            \n\n\n            \n                \n                    get reserved place for user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reservePlace\n                        \n                    \n                \n            \n            \n                \n                    \n                    reservePlace(placeId: number, userId: number, req: CreateReservePlaceReq)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('place/:placeId')@ApiParam({name: 'placeId', description: 'id of place', type: Number})@ApiBody({type: CreateReservePlaceReq})@ApiResponse({type: GetReservedPlaceResp, status: 201})@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/parking/parking.controller.ts:189\n                \n            \n\n\n            \n                \n                    resreve place\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                CreateReservePlaceReq\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Catch, Controller, Delete, ForbiddenException, Get, NotFoundException, Param, Post, Query, UseGuards } from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiParam, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { QueryFailedError } from 'typeorm';\nimport { Roles } from '../common/decorators/roles.decorator';\nimport { UserId } from '../common/decorators/user-id.decorator';\nimport { RoleGuard } from '../common/guards/role.guard';\nimport { Role } from '../common/models/roles';\nimport { ParkingServiceError, ParkingServiceErrorType } from './parking.service.errors';\nimport { ValueOrArrayToArray } from '../common/pipes/vallue-or-array-to-array.pipe';\nimport { ValuesInEnumPipe } from '../common/pipes/value-in-enum.pipe';\nimport { CreateParkPlaceReq } from './dto/create-park-place.dto';\nimport { CreateParkReq, CreateParkResp } from './dto/create-park.dto';\nimport { CreateReservePlaceReq } from './dto/create-reserve-place.dto';\nimport { GetParkPlaceInfoResp } from './dto/get-park-place-info.dto';\nimport { GetParkParams, GetParkResp } from './dto/get-park.dto';\nimport { GetParksParams, GetParksResp } from './dto/get-parks.dto';\nimport { ParkEdges, ParkEdgesUtils } from './models/park-edges.model';\nimport { ParkingService } from './parking.service';\nimport { GetReservedPlaceResp } from './dto/get-reserve-place.dto';\nimport { GetParkPlaceResp } from './dto/get-park-place.dto';\n\n/**\n * parking controller for http requests\n *\n * @export\n * @class ParkingController\n */\n@ApiTags(\"parking\")\n@Controller('parking')\nexport class ParkingController {\n\n    /**\n     * Creates an instance of ParkingController.\n     * @param {ParkingService} service\n     * @memberof ParkingController\n     */\n    constructor(\n        private readonly service: ParkingService,\n    ) {}\n\n    /**\n     * create park\n     *\n     * @param {CreateParkReq} req\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Post()\n    @ApiBody({type: CreateParkReq})\n    @ApiResponse({type: CreateParkResp, status: 201})\n    @ApiBearerAuth()\n    async createPark(\n        @Body() req: CreateParkReq,\n    ) {\n        return this.service.createPark(req).then(\n            (park) => {\n                this.service.createParkPlaceInfo(park.id, {freeSpaces: park.totalPlaces, occupiedSpaces: 0})\n                return park\n            }\n        )\n    }\n\n    /**\n     * get park by id\n     *\n     * @param {number} id\n     * @param {GetParkParams} query\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Get('/:id')\n    @ApiResponse({type: GetParkResp})\n    @ApiQuery({enum: ParkEdges, isArray: true, enumName: \"edges\", required: false, name: 'edges'})\n    @ApiParam({name: 'id', description: \"id of park\", type: Number})\n    @ApiBearerAuth()\n    getPark(\n        @Param('id') id: number,\n        @Query(\n            new ValueOrArrayToArray(\n                value => value.edges,\n                (value, array) => value.edges = array\n            ),\n            new ValuesInEnumPipe(\n                value => value.edges,\n                value => ParkEdgesUtils.valueIn(value),\n                (value, newValues) => value.edges = newValues\n            )\n        ) query: GetParkParams\n    ) {\n        return this.service.getPark(\n            id,\n            query,\n        )\n    }\n\n    /**\n     * get parks\n     *\n     * @param {GetParksParams} query\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Get()\n    @ApiResponse({type: GetParksResp, status: 200})\n    @ApiQuery({enum: ParkEdges, isArray: true, enumName: \"edges\", required: false, name: 'edges'})\n    @ApiBearerAuth()\n    async getParks(\n        @Query(\n            new ValueOrArrayToArray(\n                value => value.edges,\n                (value, array) => value.edges = array\n            ),\n            new ValuesInEnumPipe(\n                value => value.edges,\n                value => ParkEdgesUtils.valueIn(value),\n                (value, newValues) => value.edges = newValues\n            )\n        ) query: GetParksParams,\n    ) {\n        const parks = await this.service.getParks(query)\n        return {\n            items: parks\n        }\n    }\n\n    /**\n     * get last park place infos\n     *\n     * @param {number} id\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Get('/:id/parkPlacesInfo/last')\n    @ApiResponse({type: GetParkPlaceInfoResp, status: 200})\n    @ApiParam({name: 'id', description: \"id of park\", type: Number})\n    @ApiBearerAuth()\n    async getLastParkPlacesInfo(\n        @Param('id') id: number,\n    ) {\n        const lastParkPlaceInfo = await this.service.getLastParkPlacesInfo(id)\n        if(!lastParkPlaceInfo) {\n            throw new NotFoundException()\n        }\n        return lastParkPlaceInfo\n    }\n\n    /**\n     * create park place\n     *\n     * @param {CreateParkPlaceReq} req\n     * @param {number} id\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Post('/:id/place')\n    @ApiBody({type: CreateParkPlaceReq})\n    @ApiParam({name: 'id', description: \"id of park\", type: Number})\n    @ApiBearerAuth()\n    @ApiResponse({type: GetParkPlaceResp, status: 201})\n    async createPlace(\n        @Body() req: CreateParkPlaceReq,\n        @Param('id') id: number,\n    ) {\n        \n        try {\n            const place = await this.service.createParkPlace(id, req)\n            return place\n        } catch(e) {\n            if(e instanceof QueryFailedError) {\n                throw new NotFoundException(\"Park not found\")\n            }\n        }\n    }\n\n    /**\n     * resreve place\n     *\n     * @param {number} placeId\n     * @param {number} userId\n     * @param {CreateReservePlaceReq} req\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Post('place/:placeId')\n    @ApiParam({name: 'placeId', description: \"id of place\", type: Number})\n    @ApiBody({type: CreateReservePlaceReq})\n    @ApiResponse({type: GetReservedPlaceResp, status: 201})\n    @ApiBearerAuth()\n    async reservePlace(\n        @Param('placeId') placeId: number,\n        @UserId() userId: number,\n        @Body() req: CreateReservePlaceReq,\n    ) {\n        try {\n            const reserved = await this.service.reservePlace(placeId, {user_id: userId, ...req})\n            return reserved\n        } catch(e) {\n            if(e instanceof ParkingServiceError) {\n                switch(e.type) {\n                    case ParkingServiceErrorType.PlaceIsReserved:\n                        throw new BadRequestException(e.message)\n                    case ParkingServiceErrorType.PlaceNotFound:\n                        throw new NotFoundException(e.message)\n                    case ParkingServiceErrorType.UserAlreadyReservePlace:\n                        throw new BadRequestException(e.message)\n                }\n            }\n            // If not catchable\n            throw e\n        }\n    }\n\n    /**\n     * get reserved place for user\n     *\n     * @param {number} userId\n     * @return {*} \n     * @memberof ParkingController\n     */\n    @Get('/place/reserved/me')\n    @ApiResponse({type: GetReservedPlaceResp, status: 200})\n    @ApiBearerAuth()\n    async getReservedPlaceForUser(\n        @UserId() userId: number,\n    ) {\n        const reservedPlace = await this.service.getReservedPlaceForUser(userId)\n        if(!reservedPlace) {\n            throw new NotFoundException(ParkingServiceErrorType.UserDontHaveReservedPlace)\n        }\n        return reservedPlace\n    }\n\n    /**\n     * cancel reserved place for user\n     *\n     * @param {number} userId\n     * @memberof ParkingController\n     */\n    @Delete('/place/reserved/cancel/me')\n    @ApiResponse({status: 200})\n    @ApiBearerAuth()\n    async cancelReserveForUser(\n        @UserId() userId: number,\n    ) {\n        try {\n            const reservedPlace = await this.getReservedPlaceForUser(userId)\n            const _ = await this.service.cancelReserve(reservedPlace.id, {user_id: userId})\n        } catch(e) {\n            if(e instanceof ParkingServiceError) {\n                switch(e.type) {\n                    case ParkingServiceErrorType.ReservedPlaceNotFound:\n                        throw new NotFoundException(ParkingServiceErrorType.ReservedPlaceNotFound)\n                    case ParkingServiceErrorType.YouNotReserveThisPlace:\n                        throw new ForbiddenException(ParkingServiceErrorType.ReservedPlaceNotFound)\n                }\n            }\n\n            throw e\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ParkingModule.html":{"url":"modules/ParkingModule.html","title":"module - ParkingModule","body":"\n                   \n\n\n\n\n    Modules\n    ParkingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ParkingModule\n\n\n\ncluster_ParkingModule_imports\n\n\n\ncluster_ParkingModule_providers\n\n\n\n\nAuthApiModule\n\nAuthApiModule\n\n\n\nParkingModule\n\nParkingModule\n\nParkingModule -->\n\nAuthApiModule->ParkingModule\n\n\n\n\n\nParkingService\n\nParkingService\n\nParkingModule -->\n\nParkingService->ParkingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/parking/parking.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ParkingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ParkingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthApiModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ParkingService } from './parking.service';\nimport { ParkingController } from './parking.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ParkPlace } from './entity/park-place.entity';\nimport { Park } from './entity/park.entity';\nimport { ParkPlacesInfo } from './entity/park-place-info.entity';\nimport { ReservedPlace } from './entity/reserved-place.entity';\nimport { ReservedPlaceInfo } from './entity/reserved-place-info.entity';\nimport { AuthApiModule } from '../common/api/auth.api.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { HttpModule } from '@nestjs/axios';\nimport { AuthMiddleware } from '../common/middlewares/auth.middleware';\n\n@Module({\n    imports: [\n        TypeOrmModule.forFeature(\n            [\n                Park,\n                ParkPlacesInfo,\n                ParkPlace,\n                ReservedPlace,\n                ReservedPlaceInfo,\n            ]\n        ),\n        ConfigModule,\n        AuthApiModule,\n        HttpModule,\n    ],\n    providers: [\n        ParkingService\n    ],\n    controllers: [\n        ParkingController\n    ]\n})\nexport class ParkingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParkingService.html":{"url":"injectables/ParkingService.html","title":"injectable - ParkingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParkingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/parking.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Parking service implementetion\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancelReserve\n                            \n                            \n                                    Private\n                                createForeignPark\n                            \n                            \n                                    Private\n                                createForeignParkPlace\n                            \n                            \n                                createPark\n                            \n                            \n                                createParkPlace\n                            \n                            \n                                createParkPlaceInfo\n                            \n                            \n                                    Async\n                                getLastParkPlacesInfo\n                            \n                            \n                                getPark\n                            \n                            \n                                getParks\n                            \n                            \n                                    Async\n                                getPlace\n                            \n                            \n                                getReservedPlaceForUser\n                            \n                            \n                                    Async\n                                placeIsReserved\n                            \n                            \n                                    Async\n                                reservePlace\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(parkReposiotry: Repository, parkPlacesInfoReposiotry: Repository, parkPlaceReposiotry: Repository, reservedPlaceReposiotry: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/parking/parking.service.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of ParkingService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parkReposiotry\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parkPlacesInfoReposiotry\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parkPlaceReposiotry\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reservedPlaceReposiotry\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cancelReserve\n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelReserve(reservedPlaceId: number, req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:333\n                \n            \n\n\n            \n                \n                    cancel reserve\n        user_id: number,\n    }} req\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reservedPlaceId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createForeignPark\n                        \n                    \n                \n            \n            \n                \n                    \n                    createForeignPark(parkId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:193\n                \n            \n\n\n            \n                \n                    create foreign park\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parkId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Park\n\n                    \n                    \n                        {Park}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        createForeignParkPlace\n                        \n                    \n                \n            \n            \n                \n                    \n                    createForeignParkPlace(placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:210\n                \n            \n\n\n            \n                \n                    create foreign park place\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPark\n                        \n                    \n                \n            \n            \n                \ncreatePark(req: CreateParkReq)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:54\n                \n            \n\n\n            \n                \n                    create park\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CreateParkReq\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createParkPlace\n                        \n                    \n                \n            \n            \n                \ncreateParkPlace(parkId: number, req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:166\n                \n            \n\n\n            \n                \n                    create park place\n        floor: number,\n        placeUUID: string,\n        placeType: PlaceType,\n        coords: Point\n    }} req\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parkId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createParkPlaceInfo\n                        \n                    \n                \n            \n            \n                \ncreateParkPlaceInfo(parkId: number, req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:136\n                \n            \n\n\n            \n                \n                    ceate parkPlace info list\n        freeSpaces: number,\n        occupiedSpaces: number,\n    }} req\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parkId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getLastParkPlacesInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLastParkPlacesInfo(parkId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:111\n                \n            \n\n\n            \n                \n                    get last park info of park\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parkId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPark\n                        \n                    \n                \n            \n            \n                \ngetPark(id: number, params: GetParkParams)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:75\n                \n            \n\n\n            \n                \n                    get park\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                                GetParkParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getParks\n                        \n                    \n                \n            \n            \n                \ngetParks(params: GetParksParams)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:94\n                \n            \n\n\n            \n                \n                    get parks with filtering and edges\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                GetParksParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPlace\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlace(placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:258\n                \n            \n\n\n            \n                \n                    get park place\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReservedPlaceForUser\n                        \n                    \n                \n            \n            \n                \ngetReservedPlaceForUser(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:375\n                \n            \n\n\n            \n                \n                    get reserved place for user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        placeIsReserved\n                        \n                    \n                \n            \n            \n                \n                    \n                    placeIsReserved(placeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:228\n                \n            \n\n\n            \n                \n                    check if place reserved\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reservePlace\n                        \n                    \n                \n            \n            \n                \n                    \n                    reservePlace(placeId: number, req: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/parking/parking.service.ts:283\n                \n            \n\n\n            \n                \n                    resreve place\n        from: Date,\n        to: Date,\n        user_id: number\n    }} req\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    placeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { GoneException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Geometry, Point } from 'geojson';\nimport { FindOneOptions, Repository, Timestamp } from 'typeorm';\nimport { CreateParkReq } from './dto/create-park.dto';\nimport { GetParkParams } from './dto/get-park.dto';\nimport { GetParksParams } from './dto/get-parks.dto';\nimport { ParkPlacesInfo } from './entity/park-place-info.entity';\nimport { ParkPlace } from './entity/park-place.entity';\nimport { Park } from './entity/park.entity';\nimport { ReservedPlace } from './entity/reserved-place.entity';\nimport { ParkEdges, ParkEdgesUtils } from './models/park-edges.model';\nimport { PlaceType } from './models/place-type';\nimport { ParkingServiceError, ParkingServiceErrorType } from './parking.service.errors';\n\n/**\n * Parking service implementetion\n *\n * @export\n * @class ParkingService\n */\n@Injectable()\nexport class ParkingService {\n    /**\n     * Creates an instance of ParkingService.\n     * @param {Repository} parkReposiotry\n     * @param {Repository} parkPlacesInfoReposiotry\n     * @param {Repository} parkPlaceReposiotry\n     * @param {Repository} reservedPlaceReposiotry\n     * @memberof ParkingService\n     */\n    constructor(\n        @InjectRepository(Park)\n        private readonly parkReposiotry: Repository,\n\n        @InjectRepository(ParkPlacesInfo)\n        private readonly parkPlacesInfoReposiotry: Repository,\n\n        @InjectRepository(ParkPlace)\n        private readonly parkPlaceReposiotry: Repository,\n\n        @InjectRepository(ReservedPlace)\n        private readonly reservedPlaceReposiotry: Repository,\n    ) {\n    }\n\n    /**\n     * create park\n     *\n     * @param {CreateParkReq} req\n     * @return {*} \n     * @memberof ParkingService\n     */\n    createPark(\n        req: CreateParkReq\n    ) {\n        const merged =  this.parkReposiotry.merge(\n            this.parkReposiotry.create(),\n            req,\n        )\n        \n        return this.parkReposiotry.save(\n            merged\n        )\n    }\n\n    /**\n     * get park\n     *\n     * @param {number} id\n     * @param {GetParkParams} params\n     * @return {*} \n     * @memberof ParkingService\n     */\n    getPark(\n        id: number,\n        params: GetParkParams\n    ) {\n        return this.parkReposiotry.findOne(\n            id,\n            {\n                relations: params.edges \n            }\n        )\n    }\n\n    /**\n     * get parks with filtering and edges\n     *\n     * @param {GetParksParams} params\n     * @return {*} \n     * @memberof ParkingService\n     */\n    getParks(\n        params: GetParksParams,\n    ) {\n        return this.parkReposiotry.find(\n            {\n                relations: params.edges,\n            }\n        )\n    }\n\n    /**\n     * get last park info of park\n     *\n     * @param {number} parkId\n     * @return {*} \n     * @memberof ParkingService\n     */\n    async getLastParkPlacesInfo(\n        parkId: number\n    ) {\n        return this.parkPlacesInfoReposiotry.findOne(\n            {\n                where: {\n                    park: {\n                        id: parkId\n                    }\n                }\n            }\n        )\n    }\n\n    /**\n     * ceate parkPlace info list\n     *\n     * @param {number} parkId\n     * @param {{\n     *             freeSpaces: number,\n     *             occupiedSpaces: number,\n     *         }} req\n     * @return {*} \n     * @memberof ParkingService\n     */\n    createParkPlaceInfo(\n        parkId: number,\n        req: {\n            freeSpaces: number,\n            occupiedSpaces: number,\n        }\n    ) {\n        const info = this.parkPlacesInfoReposiotry.merge(\n            this.parkPlacesInfoReposiotry.create(),\n            req,\n        )\n\n        info.park = this.createForeignPark(parkId)\n\n        return this.parkPlacesInfoReposiotry.save(info)\n    }\n\n    /**\n     * create park place\n     *\n     * @param {number} parkId\n     * @param {{\n     *             floor: number,\n     *             placeUUID: string,\n     *             placeType: PlaceType,\n     *             coords: Point\n     *         }} req\n     * @return {*} \n     * @memberof ParkingService\n     */\n    createParkPlace(\n        parkId: number,\n        req: {\n            floor: number,\n            placeUUID: string,\n            placeType: PlaceType,\n            coords: Point\n        }\n    ) {\n        const place = this.parkPlaceReposiotry.merge(\n            this.parkPlaceReposiotry.create(),\n            req,\n        )\n\n        place.park = this.createForeignPark(parkId)\n\n        return this.parkPlaceReposiotry.save(place)\n    }\n\n    /**\n     * create foreign park\n     *\n     * @private\n     * @param {number} parkId\n     * @return {*}  {Park}\n     * @memberof ParkingService\n     */\n    private createForeignPark(parkId: number): Park {\n        return this.parkReposiotry.merge(\n            this.parkReposiotry.create(),\n            {\n                id: parkId,\n            }\n        )\n    }\n\n    /**\n     * create foreign park place\n     *\n     * @private\n     * @param {number} placeId\n     * @return {*} \n     * @memberof ParkingService\n     */\n    private createForeignParkPlace(\n        placeId: number,\n    ) {\n        return this.parkPlaceReposiotry.merge(\n            this.parkPlaceReposiotry.create(),\n            {\n                id: placeId,\n            }\n        )\n    }\n\n    /**\n     * check if place reserved\n     *\n     * @param {number} placeId\n     * @return {*} \n     * @memberof ParkingService\n     */\n    async placeIsReserved(\n        placeId: number\n    ) {\n        const reservedPlace = await this.reservedPlaceReposiotry.findOne(\n            {\n                where: {\n                    parkPlace: {\n                        id: placeId\n                    }\n                },\n                order: {\n                    createdAt: 'ASC'\n                }\n            }\n        )\n\n        if(!reservedPlace || reservedPlace.done) {\n            return false\n        }\n\n        return true\n    }\n\n    /**\n     * get park place\n     *\n     * @param {number} placeId\n     * @return {*} \n     * @memberof ParkingService\n     */\n    async getPlace(\n        placeId: number,\n    ) {\n        return this.parkPlaceReposiotry.findOne(\n            {\n                where: {\n                    id: placeId,\n                },\n                relations: ['park']\n            }\n        )\n    }\n\n    /**\n     * resreve place\n     *\n     * @param {number} placeId\n     * @param {{\n     *             from: Date,\n     *             to: Date,\n     *             user_id: number\n     *         }} req\n     * @return {*} \n     * @memberof ParkingService\n     */\n    async reservePlace(\n        placeId: number,\n        req: {\n            from: Date,\n            to: Date,\n            user_id: number\n        }\n    ) {\n        const place = await this.getPlace(placeId)\n        if(!place) {\n            throw new ParkingServiceError(ParkingServiceErrorType.PlaceNotFound)\n        }\n\n        const reservedForUser = await this.getReservedPlaceForUser(req.user_id)\n        if(reservedForUser) {\n            throw new ParkingServiceError(ParkingServiceErrorType.UserAlreadyReservePlace)\n        }\n        \n        if((await this.placeIsReserved(placeId))) {\n            throw new ParkingServiceError(ParkingServiceErrorType.PlaceIsReserved)\n        }\n\n        const reservePlace = this.reservedPlaceReposiotry.merge(\n            this.reservedPlaceReposiotry.create(),\n            req,\n        )\n\n        reservePlace.parkPlace = place\n\n        const lastInfo = await this.getLastParkPlacesInfo(place.park.id)\n        this.createParkPlaceInfo(\n            place.park.id,\n            {\n                freeSpaces: lastInfo.freeSpaces - 1,\n                occupiedSpaces: lastInfo.occupiedSpaces + 1,\n            }\n        )\n\n        return this.reservedPlaceReposiotry.save(reservePlace)\n    }\n\n    /**\n     * cancel reserve\n     *\n     * @param {number} reservedPlaceId\n     * @param {{\n     *             user_id: number,\n     *         }} req\n     * @memberof ParkingService\n     */\n    async cancelReserve(\n        reservedPlaceId: number,\n        req: {\n            user_id: number,\n        }\n    ) {\n        const resrvedPlace = await this.reservedPlaceReposiotry.findOne(\n            {\n                where: {\n                    id: reservedPlaceId,\n                },\n                relations: ['parkPlace', 'parkPlace.park']\n            }\n        )\n        if(!resrvedPlace) {\n            throw new ParkingServiceError(ParkingServiceErrorType.ReservedPlaceNotFound)\n        }\n\n        if (resrvedPlace.user_id != req.user_id) {\n            throw new ParkingServiceError(ParkingServiceErrorType.YouNotReserveThisPlace)\n        }\n\n        const lastInfo = await this.getLastParkPlacesInfo(resrvedPlace.parkPlace.park.id)\n        this.createParkPlaceInfo(\n            resrvedPlace.parkPlace.park.id,\n            {\n                freeSpaces: lastInfo.freeSpaces + 1,\n                occupiedSpaces: lastInfo.occupiedSpaces - 1,\n            }\n        )\n\n        resrvedPlace.done = true\n        this.reservedPlaceReposiotry.save(resrvedPlace)\n    }\n\n    /**\n     * get reserved place for user\n     *\n     * @param {number} userId\n     * @return {*} \n     * @memberof ParkingService\n     */\n    getReservedPlaceForUser(\n        userId: number\n    ) {\n        return this.reservedPlaceReposiotry.findOne(\n            {\n                where: {\n                    user_id: userId,\n                    done: false,\n                },\n                \n            }\n        )\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParkingServiceError.html":{"url":"classes/ParkingServiceError.html","title":"class - ParkingServiceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParkingServiceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/parking.service.errors.ts\n        \n\n\n            \n                Description\n            \n            \n                Parking Servic error\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: ParkingServiceErrorType)\n                    \n                \n                        \n                            \n                                Defined in src/parking/parking.service.errors.ts:30\n                            \n                        \n\n                \n                    \n                            Creates an instance of ParkingServiceError.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        ParkingServiceErrorType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParkingServiceErrorType\n\n                    \n                \n                    \n                        \n                                Defined in src/parking/parking.service.errors.ts:30\n                        \n                    \n\n            \n                \n                    type of error\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in src/parking/parking.service.errors.ts:49\n                                \n                            \n                    \n                        \n                                error name getter\n\n\n                                \n                                \n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export enum ParkingServiceErrorType {\n    PlaceIsReserved = \"Place is reserved\",\n    PlaceNotFound = \"Place not found\",\n    UserDontHaveReservedPlace = \"User don't have reserved place\",\n    UserAlreadyReservePlace = \"User already reserve place\",\n    YouNotReserveThisPlace = \"You not reserve this place\",\n    ReservedPlaceNotFound = \"ReservePlaceNotFound\"\n}\n\n/**\n * Parking Servic error\n *\n * @export\n * @class ParkingServiceError\n * @extends {Error}\n */\nexport class ParkingServiceError extends Error {\n    /**\n     * type of error\n     *\n     * @type {ParkingServiceErrorType}\n     * @memberof ParkingServiceError\n     */\n    type: ParkingServiceErrorType\n\n    /**\n     * Creates an instance of ParkingServiceError.\n     * @param {ParkingServiceErrorType} type\n     * @memberof ParkingServiceError\n     */\n    constructor(type: ParkingServiceErrorType) {\n        super(type)\n        this.type = type\n    }\n\n    /**\n     * error name getter\n     *\n     * @readonly\n     * @type {string}\n     * @memberof ParkingServiceError\n     */\n    get name(): string {\n        return this.type\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Point.html":{"url":"classes/Point.html","title":"class - Point","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Point\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/models/point.ts\n        \n\n\n            \n                Description\n            \n            \n                point class\n\n            \n\n\n            \n                Implements\n            \n            \n                            PointType\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coordinates\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        coordinates\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Position\n\n                    \n                \n                    \n                        \n                                Defined in src/common/models/point.ts:25\n                        \n                    \n\n            \n                \n                    coordinartes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/common/models/point.ts:17\n                        \n                    \n\n            \n                \n                    type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BBox, Point as PointType, Position } from \"geojson\";\n\n/**\n * point class\n *\n * @export\n * @class Point\n * @implements {PointType}\n */\nexport class Point implements PointType {\n    /**\n     * type \n     *\n     * @type {\"Point\"}\n     * @memberof Point\n     */\n    type: \"Point\";\n\n    /**\n     * coordinartes\n     *\n     * @type {Position}\n     * @memberof Point\n     */\n    coordinates: Position;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PointTransformer.html":{"url":"classes/PointTransformer.html","title":"class - PointTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PointTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/transformers/point.transformer.ts\n        \n\n\n            \n                Description\n            \n            \n                class to transform point to correcto format in postgres\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValueTransformer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                from\n                            \n                            \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n            \n                \nfrom(value)\n                \n            \n\n\n            \n                \n                    Defined in src/common/transformers/point.transformer.ts:31\n                \n            \n\n\n            \n                \n                    transform from programm format to postgress format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Point\n\n                    \n                    \n                        {Point}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n            \n                \nto(value: Point)\n                \n            \n\n\n            \n                \n                    Defined in src/common/transformers/point.transformer.ts:19\n                \n            \n\n\n            \n                \n                    transform to programm format from postress format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Point\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Point } from \"geojson\";\nimport { ValueTransformer } from \"typeorm\";\n\n/**\n * class to transform point to correcto format in postgres\n *\n * @export\n * @class PointTransformer\n * @implements {ValueTransformer}\n */\nexport class PointTransformer implements ValueTransformer {\n    /**\n     * transform to programm format from postress format\n     *\n     * @param {Point} value\n     * @return {*} \n     * @memberof PointTransformer\n     */\n    to(value: Point) {\n      const [x, y] = value.coordinates\n      return `${x}, ${y}`\n    }\n  \n    /**\n     * transform from programm format to postgress format\n     *\n     * @param {*} value\n     * @return {*}  {Point}\n     * @memberof PointTransformer\n     */\n    from(value): Point {\n      const { x, y } = value\n      return {\n          type: \"Point\",\n          coordinates: [x, y]\n      }\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ReservedPlace.html":{"url":"entities/ReservedPlace.html","title":"entity - ReservedPlace","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ReservedPlace\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/entity/reserved-place.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                ReservedPlace entity representation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                done\n                            \n                            \n                                from\n                            \n                            \n                                id\n                            \n                            \n                                parkPlace\n                            \n                            \n                                reservedPlaceInfo\n                            \n                            \n                                to\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', default: 'NOW()'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:74\n                        \n                    \n\n            \n                \n                    createdAt date of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        done\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:65\n                        \n                    \n\n            \n                \n                    done of reserve\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        from\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:47\n                        \n                    \n\n            \n                \n                    date of from place is reserved\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:20\n                        \n                    \n\n            \n                \n                    id of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parkPlace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ParkPlace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, parkPlace => parkPlace.reservedPlaces)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:38\n                        \n                    \n\n            \n                \n                    park place edge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservedPlaceInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservedPlaceInfo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, info => info.reservedPlace)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:92\n                        \n                    \n\n            \n                \n                    reserved place info edge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:56\n                        \n                    \n\n            \n                \n                    date of place is stop to be reserved\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:83\n                        \n                    \n\n            \n                \n                    updatedAt date of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place.entity.ts:29\n                        \n                    \n\n            \n                \n                    id of user that reserv place\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, OneToOne, PrimaryGeneratedColumn, Timestamp } from \"typeorm\";\nimport { ParkPlace } from \"./park-place.entity\";\nimport { ReservedPlaceInfo } from \"./reserved-place-info.entity\";\n\n/**\n * ReservedPlace entity representation\n *\n * @export\n * @class ReservedPlace\n */\n@Entity()\nexport class ReservedPlace {\n    /**\n     * id of entity\n     *\n     * @type {number}\n     * @memberof ReservedPlace\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n\n    /**\n     * id of user that reserv place\n     *\n     * @type {number}\n     * @memberof ReservedPlace\n     */\n    @Column()\n    user_id: number\n\n    /**\n     * park place edge\n     *\n     * @type {ParkPlace}\n     * @memberof ReservedPlace\n     */\n    @ManyToOne(() => ParkPlace, (parkPlace) => parkPlace.reservedPlaces)\n    parkPlace: ParkPlace\n\n    /**\n     * date of from place is reserved\n     *\n     * @type {Date}\n     * @memberof ReservedPlace\n     */\n    @Column({type: 'timestamp'})\n    from: Date\n\n    /**\n     * date of place is stop to be reserved\n     *\n     * @type {Date}\n     * @memberof ReservedPlace\n     */\n    @Column({type: 'timestamp'})\n    to: Date\n\n    /**\n     * done of reserve\n     *\n     * @type {boolean}\n     * @memberof ReservedPlace\n     */\n    @Column({type: 'boolean', default: false})\n    done: boolean\n\n    /**\n     * createdAt date of entity\n     *\n     * @type {Date}\n     * @memberof ReservedPlace\n     */\n    @Column({type: 'timestamp', default: 'NOW()'})\n    createdAt: Date\n\n    /**\n     * updatedAt date of entity\n     *\n     * @type {Date}\n     * @memberof ReservedPlace\n     */\n    @Column({type: 'timestamp', nullable: true})\n    updatedAt: Date\n\n    /**\n     * reserved place info edge\n     *\n     * @type {ReservedPlaceInfo}\n     * @memberof ReservedPlace\n     */\n    @OneToOne(() => ReservedPlaceInfo, (info) => info.reservedPlace)\n    reservedPlaceInfo: ReservedPlaceInfo\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ReservedPlaceInfo.html":{"url":"entities/ReservedPlaceInfo.html","title":"entity - ReservedPlaceInfo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ReservedPlaceInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/parking/entity/reserved-place-info.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                ReservedPlaceInfo entity representation\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                arriveTime\n                            \n                            \n                                departureTime\n                            \n                            \n                                id\n                            \n                            \n                                reservedPlace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        arriveTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place-info.entity.ts:28\n                        \n                    \n\n            \n                \n                    arrive time of user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        departureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place-info.entity.ts:37\n                        \n                    \n\n            \n                \n                    departure time\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place-info.entity.ts:19\n                        \n                    \n\n            \n                \n                    id of entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reservedPlace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReservedPlace\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, place => place.reservedPlaceInfo)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/parking/entity/reserved-place-info.entity.ts:46\n                        \n                    \n\n            \n                \n                    reservedPlace edge\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn, Timestamp } from \"typeorm\";\nimport { ReservedPlace } from \"./reserved-place.entity\";\n\n/**\n * ReservedPlaceInfo entity representation\n *\n * @export\n * @class ReservedPlaceInfo\n */\n@Entity()\nexport class ReservedPlaceInfo {\n    /**\n     * id of entity\n     *\n     * @type {number}\n     * @memberof ReservedPlaceInfo\n     */\n    @PrimaryGeneratedColumn()\n    id: number\n\n    /**\n     * arrive time of user\n     *\n     * @type {Date}\n     * @memberof ReservedPlaceInfo\n     */\n    @Column({type: 'timestamp', nullable: true})\n    arriveTime: Date\n\n    /**\n     * departure time\n     *\n     * @type {Date}\n     * @memberof ReservedPlaceInfo\n     */\n    @Column({type: 'timestamp', nullable: true})\n    departureTime: Date\n\n    /**\n     * reservedPlace edge\n     *\n     * @type {ReservedPlace}\n     * @memberof ReservedPlaceInfo\n     */\n    @OneToOne(() => ReservedPlace, (place) => place.reservedPlaceInfo)\n    reservedPlace: ReservedPlace\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Roles guard to check if user can run method\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:19\n                            \n                        \n\n                \n                    \n                            Creates an instance of RoleGuard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/common/guards/role.guard.ts:37\n                \n            \n\n\n            \n                \n                    can active method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        {(boolean | Promise | Observable)}\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, HttpException, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\nimport { ROLES_KEY } from \"../decorators/roles.decorator\";\nimport { Role } from \"../models/roles\";\nimport { Request } from \"express\";\nimport { parseJwt } from \"../utils/get-jwt-payload\";\n// import { JwtService } from \"@nestjs/jwt\";\n\n\n/**\n * Roles guard to check if user can run method\n *\n * @export\n * @class RoleGuard\n * @implements {CanActivate}\n */\n@Injectable()\nexport class RoleGuard implements CanActivate { \n    /**\n     * Creates an instance of RoleGuard.\n     * @param {Reflector} reflector\n     * @memberof RoleGuard\n     */\n    constructor (\n        private reflector: Reflector, \n        // private readonly jwtService: JwtService,\n    ) {}\n    \n    /**\n     * can active method\n     *\n     * @param {ExecutionContext} context\n     * @return {*}  {(boolean | Promise | Observable)}\n     * @memberof RoleGuard\n     */\n    canActivate(context: ExecutionContext): boolean | Promise | Observable {\n        const requiredRoles = this.reflector.getAllAndOverride(\n            ROLES_KEY,\n            [\n                context.getHandler(),\n                context.getClass()\n            ]\n        )\n\n        const req = context.switchToHttp().getRequest()\n        const authHeader = req.headers.authorization\n        if (authHeader == undefined) {\n            return false\n        }\n\n        const [_, token] = authHeader.split(\" \")\n        if (token == undefined) {\n            return false\n        }\n        const {payload: {role: decodedRole}} = parseJwt(token)\n\n        return requiredRoles.some((role) => decodedRole.includes(role))\n    }\n\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValueOrArrayToArray.html":{"url":"injectables/ValueOrArrayToArray.html","title":"injectable - ValueOrArrayToArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValueOrArrayToArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/vallue-or-array-to-array.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Transform value and array to array\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getValueOrArray: (value: QueryType) => void, setValue: (value: QueryType,array: ValueType[]) => void)\n                    \n                \n                        \n                            \n                                Defined in src/common/pipes/vallue-or-array-to-array.pipe.ts:13\n                            \n                        \n\n                \n                    \n                            Creates an instance of ValueOrArrayToArray.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getValueOrArray\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setValue\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: QueryType, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/vallue-or-array-to-array.pipe.ts:33\n                \n            \n\n\n            \n                \n                    transform fucntion\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            QueryType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     QueryType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from \"@nestjs/common\";\n\n/**\n * Transform value and array to array\n *\n * @export\n * @class ValueOrArrayToArray\n * @implements {PipeTransform}\n * @template QueryType\n * @template ValueType\n */\n@Injectable()\nexport class ValueOrArrayToArray implements PipeTransform {\n    /**\n     * Creates an instance of ValueOrArrayToArray.\n     * @param {((value: QueryType) => ValueType[] | ValueType)} getValueOrArray\n     * @param {(value: QueryType, array: ValueType[]) => void} setValue\n     * @memberof ValueOrArrayToArray\n     */\n    constructor(\n        private readonly getValueOrArray: (value: QueryType) => ValueType[] | ValueType,\n        private readonly setValue: (value: QueryType, array: ValueType[]) => void,\n    ) {}\n\n    /**\n     * transform fucntion\n     *\n     * @param {QueryType} value\n     * @param {ArgumentMetadata} metadata\n     * @return {*} \n     * @memberof ValueOrArrayToArray\n     */\n    transform(value: QueryType, metadata: ArgumentMetadata) {\n        const valueOrArray = this.getValueOrArray(value)\n        if(Array.isArray(valueOrArray)) {\n            this.setValue(value, valueOrArray)\n        } else if (valueOrArray){\n            this.setValue(value, [valueOrArray])\n        } else {\n            this.setValue(value, [])\n        }\n        return value\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValuesInEnumPipe.html":{"url":"injectables/ValuesInEnumPipe.html","title":"injectable - ValuesInEnumPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValuesInEnumPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pipes/value-in-enum.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                check that values in enum and transform in into enum if can\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getValues: (value: QueryType) => void, checkInEnumFunc: (value: string) => void, setValues: (value: QueryType,newValues: string[]) => void)\n                    \n                \n                        \n                            \n                                Defined in src/common/pipes/value-in-enum.pipe.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of ValuesInEnumPipe.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getValues\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        checkInEnumFunc\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setValues\n                                                  \n                                                        \n                                                                        function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: QueryType, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/common/pipes/value-in-enum.pipe.ts:36\n                \n            \n\n\n            \n                \n                    transform method\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            QueryType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     QueryType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ArgumentMetadata, Injectable, PipeTransform } from \"@nestjs/common\";\n\n/**\n * check that values in enum and transform in into enum if can\n *\n * @export\n * @class ValuesInEnumPipe\n * @implements {PipeTransform}\n * @template QueryType\n */\n@Injectable()\nexport class ValuesInEnumPipe implements PipeTransform {\n    /**\n     * Creates an instance of ValuesInEnumPipe.\n     * @param {(value: QueryType) => string[]} getValues\n     * @param {(value: string) => boolean} checkInEnumFunc\n     * @param {(value: QueryType, newValues: string[]) => void} setValues\n     * @memberof ValuesInEnumPipe\n     */\n    constructor(\n        private readonly getValues: (value: QueryType) => string[],\n        private readonly checkInEnumFunc: (value: string) => boolean,\n        private readonly setValues: (value: QueryType, newValues: string[]) => void,\n    ) {\n\n    }\n\n    /**\n     * transform method\n     *\n     * @param {QueryType} value\n     * @param {ArgumentMetadata} metadata\n     * @return {*} \n     * @memberof ValuesInEnumPipe\n     */\n    transform(value: QueryType, metadata: ArgumentMetadata) {\n        this.setValues(value, this.getValues(value).filter(value => this.checkInEnumFunc(value)))\n        return value\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/api/auth.api.ts\n            \n            injectable\n            AuthApi\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/user-id.decorator.ts\n            \n            variable\n            UserId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/auth.middleware.ts\n            \n            injectable\n            AuthMiddleware\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/models/point.ts\n            \n            class\n            Point\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pipes/vallue-or-array-to-array.pipe.ts\n            \n            injectable\n            ValueOrArrayToArray\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/pipes/value-in-enum.pipe.ts\n            \n            injectable\n            ValuesInEnumPipe\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/transformers/point.transformer.ts\n            \n            class\n            PointTransformer\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/common/utils/get-jwt-payload.ts\n            \n            function\n            parseJwt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parking/dto/create-park-place.dto.ts\n            \n            class\n            CreateParkPlaceReq\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/parking/dto/create-park.dto.ts\n            \n            class\n            CreateParkReq\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/parking/dto/create-park.dto.ts\n            \n            class\n            CreateParkResp\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/parking/dto/create-reserve-place.dto.ts\n            \n            class\n            CreateReservePlaceReq\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/parking/dto/get-park-place-info.dto.ts\n            \n            class\n            GetParkPlaceInfoResp\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/parking/dto/get-park-place.dto.ts\n            \n            class\n            GetParkPlaceResp\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/parking/dto/get-park.dto.ts\n            \n            class\n            GetParkParams\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/parking/dto/get-park.dto.ts\n            \n            class\n            GetParkResp\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/parking/dto/get-parks.dto.ts\n            \n            class\n            GetParksParams\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/parking/dto/get-parks.dto.ts\n            \n            class\n            GetParksResp\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/parking/dto/get-reserve-place.dto.ts\n            \n            class\n            GetReservedPlaceResp\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/parking/entity/park-place-info.entity.ts\n            \n            entity\n            ParkPlacesInfo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parking/entity/park-place.entity.ts\n            \n            entity\n            ParkPlace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parking/entity/park.entity.ts\n            \n            entity\n            Park\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parking/entity/reserved-place-info.entity.ts\n            \n            entity\n            ReservedPlaceInfo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parking/entity/reserved-place.entity.ts\n            \n            entity\n            ReservedPlace\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/parking/models/park-edges.model.ts\n            \n            class\n            ParkEdgesUtils\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/parking/parking.controller.ts\n            \n            controller\n            ParkingController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/parking/parking.service.errors.ts\n            \n            class\n            ParkingServiceError\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/parking/parking.service.ts\n            \n            injectable\n            ParkingService\n            \n                100 %\n                (15/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^0.0.7\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @types/geojson : ^7946.0.8\n        \n            @types/uuid : ^8.3.4\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mysql2 : ^2.3.3\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : ^0.2.45\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ParkEdges   (src/.../park-edges.model.ts)\n                        \n                        \n                            ParkingServiceErrorType   (src/.../parking.service.errors.ts)\n                        \n                        \n                            PlaceType   (src/.../place-type.ts)\n                        \n                        \n                            Role   (src/.../roles.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/parking/models/park-edges.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ParkEdges\n                    \n                \n                    \n                        \n                            edges for parks enum\n\n                        \n                    \n                        \n                            \n                                 parkPlacesInfo\n                            \n                        \n                        \n                            \n                                Value : parkPlacesInfo\n                            \n                        \n                        \n                            \n                                 parkPlaces\n                            \n                        \n                        \n                            \n                                Value : parkPlaces\n                            \n                        \n            \n        \n\n    src/parking/parking.service.errors.ts\n    \n        \n            \n                \n                    \n                        \n                        ParkingServiceErrorType\n                    \n                \n                    \n                        \n                            Parking place errors type enum\n\n                        \n                    \n                        \n                            \n                                 PlaceIsReserved\n                            \n                        \n                        \n                            \n                                Value : Place is reserved\n                            \n                        \n                        \n                            \n                                 PlaceNotFound\n                            \n                        \n                        \n                            \n                                Value : Place not found\n                            \n                        \n                        \n                            \n                                 UserDontHaveReservedPlace\n                            \n                        \n                        \n                            \n                                Value : User don't have reserved place\n                            \n                        \n                        \n                            \n                                 UserAlreadyReservePlace\n                            \n                        \n                        \n                            \n                                Value : User already reserve place\n                            \n                        \n                        \n                            \n                                 YouNotReserveThisPlace\n                            \n                        \n                        \n                            \n                                Value : You not reserve this place\n                            \n                        \n                        \n                            \n                                 ReservedPlaceNotFound\n                            \n                        \n                        \n                            \n                                Value : ReservePlaceNotFound\n                            \n                        \n            \n        \n\n    src/parking/models/place-type.ts\n    \n        \n            \n                \n                    \n                        \n                        PlaceType\n                    \n                \n                    \n                        \n                            park place type enum1\n\n                        \n                    \n                        \n                            \n                                 Standart\n                            \n                        \n                        \n                            \n                                Value : standart\n                            \n                        \n                        \n                            \n                                 ForDisabled\n                            \n                        \n                        \n                            \n                                Value : forDisabled\n                            \n                        \n            \n        \n\n    src/common/models/roles.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            parseJwt   (src/.../get-jwt-payload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    entryoint of programm\n\n\n                \n            \n        \n    \n    src/common/utils/get-jwt-payload.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseJwt\n                        \n                    \n                \n            \n            \n                \nparseJwt(token: string)\n                \n            \n\n\n\n\n            \n                \n                    function to decode jwt and get payload\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     any | null\n\n                    \n                    \n                        {(any | null)}\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ParkingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthApiModule\n\n\n\ncluster_AuthApiModule_exports\n\n\n\ncluster_AuthApiModule_providers\n\n\n\ncluster_ParkingModule\n\n\n\ncluster_ParkingModule_providers\n\n\n\n\nAuthApiModule\n\nAuthApiModule\n\n\n\nParkingModule\n\nParkingModule\n\nParkingModule -->\n\nAuthApiModule->ParkingModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthApiModule->AppModule\n\n\n\n\n\nAuthApi \n\nAuthApi \n\nAuthApi  -->\n\nAuthApiModule->AuthApi \n\n\n\nAppModule -->\n\nParkingModule->AppModule\n\n\n\n\n\nAuthApi\n\nAuthApi\n\nAuthApiModule -->\n\nAuthApi->AuthApiModule\n\n\n\n\n\nParkingService\n\nParkingService\n\nParkingModule -->\n\nParkingService->ParkingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CheckTokenReq   (src/.../auth.api.ts)\n                        \n                        \n                            CheckTokenResp   (src/.../auth.api.ts)\n                        \n                        \n                            CheckTokenResult   (src/.../auth.api.ts)\n                        \n                        \n                            Park   (src/.../park.model.ts)\n                        \n                        \n                            ParkPlace   (src/.../park-place.model.ts)\n                        \n                        \n                            ParkPlacesInfo   (src/.../park-places-info.model.ts)\n                        \n                        \n                            ReservedPlace   (src/.../reserver-place.model.ts)\n                        \n                        \n                            ReservedPlaceInfo   (src/.../reserved-place-info.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/api/auth.api.ts\n    \n    \n        \n            \n                \n                    \n                    CheckTokenReq\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CheckTokenResp\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CheckTokenResult\n                \n            \n            \n                \n                        \"ok\" | \"invalid\"\n\n                \n            \n        \n    \n    src/parking/models/park.model.ts\n    \n    \n        \n            \n                \n                    \n                    Park\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/parking/models/park-place.model.ts\n    \n    \n        \n            \n                \n                    \n                    ParkPlace\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/parking/models/park-places-info.model.ts\n    \n    \n        \n            \n                \n                    \n                    ParkPlacesInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/parking/models/reserver-place.model.ts\n    \n    \n        \n            \n                \n                    \n                    ReservedPlace\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/parking/models/reserved-place-info.model.ts\n    \n    \n        \n            \n                \n                    \n                    ReservedPlaceInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            UserId   (src/.../user-id.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n            \n                \n                    Roles decorator for roles guard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n            \n                \n                    Roles key in metadata\n\n                \n            \n\n        \n    \n\n    src/common/decorators/user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const req = ctx.switchToHttp().getRequest()\n        const authHeader = req.headers.authorization\n        if(!authHeader) {\n            return 0\n        }\n\n        const [_, token] = authHeader.split(\" \")\n        if(!token) {\n            return 0\n        }\n\n        const {payload: {userId}} = parseJwt(token)\n\n        return userId\n    }\n)\n                    \n                \n\n            \n                \n                    Decorator to get userId from req token\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
